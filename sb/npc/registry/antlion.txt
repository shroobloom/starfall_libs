--@name Antlion Registry
--@author shroobloom
--@shared
--@include sb/e2vm.txt
--@include sb/util.txt
--@include sb/spawner.txt


if SERVER then
    local Util = require("sb/util.txt")
    local Spawner = require("sb/spawner.txt")
    local E2VM = require("sb/e2vm.txt")
    
    local Burrow, Damager
    
    Spawner.Enqueue(function()
        Burrow = E2VM:new([[
@name [VM] Burrow KV
@inputs Antlion:entity
@trigger Antlion

if (Antlion) {
    Antlion:entSetKeyValue( "StartBurrowed", 1 )
}
        ]])
    end)
    
    
    
    
    local function antlionUnburrow( npc )
        if not Burrow then return end
        
        npc:setColor(Color(0,0,0,0))
        Burrow:fireInput( "Antlion", npc )
        
        Util.wait(0.5)
        if not npc:isValid() then return end
        
        npc:fireInput("burrow")
        
        Util.wait(1.5)
        if not npc:isValid() then return end
        
        npc:setColor(Color(255,255,255,255))
        npc:fireInput("unburrow")
        
    end
    
    
    
    -- Prevent Antlion Guards from trampling Antlions
    hook.add("EntityTakeDamage", "antlion_blockTrample", function( victim, attacker )
        if not victim.IsChipNPC or not attacker.IsChipNPC then return end
        if victim:getClass() ~= "npc_antlion" or attacker:getClass() ~= "npc_antlionguard" then return end
        
        return true
    end)
    
    
    
    return function( NPC )
        
        NPC:register("Antlion", {
            Name = "Antlion",
            Class = "npc_antlion",
            BoxSize = Vector(32, 32, 64),
            
            SpawnObscured = false,
            Spawn = antlionUnburrow,
            
            Squad = {
                {"Antlion", 2, 4}
            }
        })
        
        
        NPC:register("AntlionGuard", {
            Name = "Antlion Guard",
            Class = "npc_antlionguard",
            BoxSize = Vector(80, 80, 100),
            
            Health = 350,
            
            SpawnObscured = false,
            Spawn = function( npc )
                antlionUnburrow( npc )
                
                timer.simple(3, function()
                    if not isValid(npc) then return end
                    NPC.createHealthbar( npc )
                end)
            end,
            
            Squad = {
                {"Antlion", 0, 4}
            }
        })
        
        
        NPC:register("ArmoredAntlion", {
            Name = "Armored Antlion",
            Class = "npc_antlion",
            BoxSize = Vector(32, 32, 64),
            
            Scale = 1.5,
            Health = 200,
            Damage = 10,
            
            Material = "models/combine_advisor/hose",
            
            SpawnObscured = false,
            Spawn = function(npc)
                antlionUnburrow(npc)
                npc:fireInput("DisableJump", 1)
            end,
            
            Attack = function( npc, victim )
                npc:emitSound("npc/manhack/grind_flesh" .. math.random(1,3) .. ".wav")
            end,
            
            TakeDamage = function( npc, attacker, inflictor, amount, dmgType, pos, force )
                if dmgType ~= DAMAGE.BLAST then
                    
                    if effect.canCreate() then
                        local ef = effect.create()
                        ef:setOrigin(pos)
                        ef:play("MetalSpark")
                    end
                    
                    return amount*0.1
                end
            end
        })
        
        --[[NPC:register("AntlionSwarmer", {
            Name = "Antlion Swarmer",
            Class = "npc_antlion",
            BoxSize = Vector(32, 32, 64),
            Scale = 0.5,
            Damage = 0.5,
            Health = 30,
            
            SpawnObscured = false,
            Spawn = antlionUnburrow,
            
            Squad = {
                {"AntlionSwarmer", 3, 5}
            }
        })]]
        
        
        
    end
    
end
