--@name Antlion Nest Registry
--@author shroobloom
--@shared
--@include sb/util.txt
--@include sb/spawner.txt
--@include sb/npc/main.txt
--@include sb/npc/prop_npc.txt
--@include sb/physics_solver.txt
--@include sb/e2vm.txt





if SERVER then
    
    local E2VM = require("sb/e2vm.txt")
    local Solver = require("sb/physics_solver.txt")
    local NPC = require("sb/npc/main.txt")
    local PropNPC = require("sb/npc/prop_npc.txt")
    local Util = require("sb/util.txt")
    local Spawner = require("sb/spawner.txt")
    
    
    local SCOUTS_ON_DAMAGE_MIN_DISTANCE = 1200
    local SCOUTS_ON_DAMAGE_CHANCE = 0.1
    
    local GUARD_PROTECTION_RANGE = 2500
    
    local DAMAGE_ANNOUNCEMENTS = {
        "The shell has hardened. Take out the nest's guardians to weaken its armor!",
        "The shell has hardened once again! Take the guardians out!",
        "The shell is crumbling; it's nearly broken!"
    }
    
    local BOSS_SPAWN_POOL = {
        {
            ID = "AntlionGuard",
            Weight = 1
        },
        {
            ID = "FireAnt",
            Weight = 1
        },
        {
            ID = "ArmoredAntlion",
            Weight = 2
        },
        {
            ID = "Antlion",
            Weight = 12
        }
    }
    
    
    
    local function getNearbyGuards( npc )
        local Out = {}
        
        for i,v in pairs(NPC.Instances) do
            if v.ID == "AntlionGuard" and v:getPos():getDistanceSqr( npc:getPos() ) < GUARD_PROTECTION_RANGE^2 then
                table.insert(Out, v)
            end
        end
        
        return Out
    end
    
    
    return function( NPC )
        
        NPC:register("AntlionNest", {
            Name = "Antlion Nest",
            BoxSize = Vector(256, 256, 512),
            
            Health = 20000,
            Boss = true,
            
            Create = function( pos, data )
                
                local yaw = math.random()*360
                
                local Hitbox = prop.create( pos, Angle(0,yaw,0), "models/props_wasteland/rockcliff05f.mdl", true )
                Hitbox:setPos( Hitbox:getPos() + Hitbox:getUp()*Hitbox:obbSize().z*0.3)
                Hitbox:setColor(Color(255,255,255,0))
                Hitbox:setPhysMaterial("zombieflesh")
                
                Hitbox.Holos = {}
                Hitbox.Arms = {}
                
                local Parent = hologram.create( Hitbox:getPos(), Hitbox:getAngles(), "models/hunter/blocks/cube025x025x025.mdl" )
                Parent:setNoDraw(true)
                Parent:setParent(Hitbox)
                
                Hitbox.HoloParent = Parent
                Hitbox.Invincible = false
                
                Hitbox.LastDamageSpawn = timer.curtime()
                
                
                -- Holos
                for i=1, 3 do
                    local a = i/3 * 360 + yaw
                    local ang = Angle(-70,a,0)
                    
                    local pc = math.random()
                    
                    local egg = hologram.create( pos + ang:getForward()*pc*150, ang, "models/props_combine/headcrabcannister01a.mdl", Vector(4,4,4) )
                    egg:setMaterial("models/antlion/antlion_innards")
                    egg:setParent(Parent)
                    table.insert(Hitbox.Holos, egg)
                    table.insert(Hitbox.Arms, egg)
                    
                    local sac = hologram.create( pos + ang:getForward()*(pc + 0.5)*150, ang, "models/hunter/misc/sphere1x1.mdl", Vector(5,4,4) )
                    sac:setMaterial("phoenix_storms/egg")
                    sac:setParent(Parent)
                    table.insert(Hitbox.Holos, sac)
                end
                
                for i=1, 5 do
                    local a = i/5 * 360 + yaw
                    local ang = Angle(-30,a + 15,0)
                    
                    local pc = math.random()
                    
                    local gore = hologram.create( pos + Vector(math.cos(math.rad(a)), math.sin(math.rad(a)), 0.1)*100, ang, "models/props_wasteland/rockgranite02c.mdl", Vector(3,3.5,4) )
                    gore:setMaterial("models/antlion/antlion_innards")
                    gore:setParent(Parent)
                    table.insert(Hitbox.Holos, gore)
                end
                
                
                local LastHit = 0
                
                Hitbox.Phase = 0
                
                local function nudge(v)
                    v:setPos(v:getPos() - Vector(0,0,10*math.random()))
                    v:setAngles( v:getAngles() + Angle( math.random()-0.5, math.random()-0.5, math.random()-0.5 )*5 )
                    v:setScale( v:getScale() * 0.9 )
                    
                    if effect.canCreate() then
                        local ef = effect.create()
                        ef:setOrigin(v:localToWorld(v:obbSize()*Vector(math.random()-0.5, math.random()-0.5, math.random()-0.5)*v:getScale()))
                        ef:play("AntlionGib")
                    end
                end
                
                NPC.announceGlobal( Color(255,110,110), "An Antlion Nest has spawned!" )
                
                PropNPC.setup( Hitbox, data.Name, data.Health, function( victim, attacker, inflictor, amount, dmgType, position )
                    
                    local distance = attacker:getPos():getDistance( Hitbox:getPos() )
                    local mul = math.clamp(1 - 0.5 * (distance - 1500)/1500, 0, 1)
                    
                    -- -25% for every nearby antlion guard
                    local guards = getNearbyGuards( Hitbox )
                    
                    for i,v in pairs(guards) do
                        mul = mul * 0.75
                    end
                    
                    
                    local vehicleHeightMul = attacker:inVehicle() and 8 or 1
                    local floor = trace.line( attacker:getPos(), attacker:getPos() - Vector(0,0,500*vehicleHeightMul), nil, nil, COLLISION_GROUP.IN_VEHICLE )
                    mul = mul * math.min(1 - floor.Fraction*1.1 + 0.1, 1)
                    
                    
                    local oldPc = Hitbox.Health / Hitbox.MaxHealth
                    local newPc = (Hitbox.Health - amount*mul) / Hitbox.MaxHealth
                    
                    for i=1,3 do
                        if oldPc > i*0.25 and newPc <= i*0.25 then
                            
                            Hitbox:emitSound("npc/antlion/distract1.wav", 100)
                            Hitbox:emitSound("npc/combine_gunship/gunship_moan.wav", 100)
                            
                            Hitbox.Phase = 4 - math.ceil(newPc*4)
                            NPC.announce( Color(255,255,144), "The Antlion Nest is hatching reinforcements! " .. DAMAGE_ANNOUNCEMENTS[Hitbox.Phase] )
                            
                            for i=1,9 do
                                local a = i/9 * 2 * math.pi
                                local r = math.random(280, 340)
                                local pos = Hitbox:getPos() + Vector( math.cos(a)*r, math.sin(a)*r, 0 )
                                
                                Spawner.Enqueue(function()
                                    if not Hitbox:isValid() then return end
                                    NPC.spawn( pos + Vector(0,0,8), "AntlionGuard", Hitbox )
                                end)
                            end
                            
                            PropNPC.setInvincible( Hitbox, true )
                            
                            timer.simple(7, function()
                                PropNPC.setInvincible( Hitbox, false )
                            end)
                            
                            break
                        end
                    end
                    
                    
                    for i=1, 9 do
                        if oldPc > i/10 and newPc <= i/10 then
                            
                            for i=1,2 do
                                nudge(table.random( Hitbox.Holos ))
                            end
                            
                        end
                    end
                    
                    
                    if ((timer.curtime() - LastHit) > 0.25 or dmgType == DAMAGE.BLAST) then
                        LastHit = timer.curtime()
                        
                        net.start("nest_gib")
                        net.writeVector(position)
                        net.sendPVS(Hitbox:getPos(), true)
                        
                        for i=1, dmgType == DAMAGE.BLAST and #guards or 3 do
                            if #guards == 0 or not effect.canCreate() then break end
                            
                            local g = table.remove(guards, math.random(#guards))
                            
                            local ef = effect.create()
                            ef:setOrigin(g:getPos())
                            ef:play("VortDispel")
                        end
                        
                        if math.random() < SCOUTS_ON_DAMAGE_CHANCE and attacker:getPos():getDistance(Hitbox:getPos()) > SCOUTS_ON_DAMAGE_MIN_DISTANCE and timer.curtime() - Hitbox.LastDamageSpawn > 5 then
                            Hitbox.LastDamageSpawn = timer.curtime()
                            NPC.attemptSpawns( attacker:getPos(), BOSS_SPAWN_POOL, {200,600}, 3, nil, true )
                        end
                    end
                    
                    --[[if math.random() < 0.25 and amount*mul > 50 then
                        NPC.attemptSpawns( attacker:getPos(), BOSS_SPAWN_POOL, {200,600}, 3 )
                    end]]
                    
                    return mul
                end)
                
                Hitbox.DamageMultiplier = 1
                Hitbox.MeleeDamageMultiplier = 4
                Hitbox.ExplosiveDamageMultiplier = 1.5
                Hitbox.DeathSequenceLength = 7
                
                return Hitbox
                
            end,
            
            Spawn = function( npc )
                NPC.createHealthbar( npc )
            end,
            
            Death = function( npc )
                
                npc.HoloParent:setParent(nil)
                
                local function nudge(v)
                    v:setPos(v:getPos() - Vector(0,0,10*math.random()))
                    v:setAngles( v:getAngles() + Angle( math.random()-0.5, math.random()-0.5, math.random()-0.5 )*5 )
                    v:setScale( v:getScale() * 0.9 )
                    
                    if effect.canCreate() then
                        local ef = effect.create()
                        ef:setOrigin(v:localToWorld(v:obbSize()*Vector(math.random()-0.5, math.random()-0.5, math.random()-0.5)*v:getScale()))
                        ef:play("AntlionGib")
                    end
                end
                
                for i,v in pairs(npc.Holos) do
                    v.Stage = 0
                end
                
                while true do
                    Util.wait(0.1)
                    
                    local v = table.random(npc.Holos)
                    if not v then break end
                    
                    nudge(v)
                    v.Stage = v.Stage + 1
                    
                    if v.Stage == 6 then
                        table.removeByValue(npc.Holos, v)
                        v:remove()
                    end
                end
                
                npc.HoloParent:remove()
                
                -- nest is removed before this is run
                local plural = #NPC.getAll( "AntlionNest" ) > 0
                NPC.announceGlobal( Color(144,255,100), (plural and "An" or "The") .. " Antlion Nest has been defeated!" )
                
            end,
            
            Abilities = {
                {
                    -- Antlion Spawn (Nearby)
                    Cooldown = 3,
                    Use = function( npc )
                        if not NPC.isSomeoneNearby( npc:getPos(), 3000 ) then return end
                        NPC.attemptSpawns( npc:getPos(), BOSS_SPAWN_POOL, {280,420}, 1 + npc.Phase )
                    end
                },
                {
                    -- Location Cry
                    Cooldown = 25,
                    Use = function( npc )
                        if NPC.isSomeoneNearby( npc:getPos(), 3000 ) then return end
                        if not sound.canCreate() then return end
                        
                        if sound.canCreate() then
                            local roar = sound.create(npc, "npc/combine_gunship/gunship_moan.wav", true)
                            roar:setSoundLevel( 150 )
                            roar:play()
                            roar:setVolume(1)
                            
                            timer.simple(sound.duration("npc/combine_gunship/gunship_moan.wav"), function()
                                roar:destroy()
                            end)
                        end
                    end
                },
                {
                    -- Artillery
                    Cooldown = 10,
                    Use = function( npc )
                        if npc.Phase < 1 or math.random() < 0.5 then return end
                        
                        local LaunchPos = npc:obbCenterW()
                        
                        local targets = find.byClass("player", function(e)
                            local maxRange = isValid(e:getVehicle()) and 7500 or 3000
                            return table.hasValue(NPC.Participants, e) and e:getPos():getDistance(LaunchPos) < maxRange and not trace.line( LaunchPos, e:getPos(), nil, COLLISION_GROUP.DEBRIS ).Hit
                        end)
                        
                        -- if a vehicle is present, only target vehicles:
                        local vehiclePresent = false
                        
                        for i,v in pairs(targets) do
                            if isValid(v:getVehicle()) then
                                vehiclePresent = true
                                break
                            end
                        end
                        
                        if vehiclePresent then
                            for i=#targets, 1, -1 do
                                if not isValid(targets[i]:getVehicle()) then
                                    table.remove(targets, i)
                                end
                            end
                        end
                        
                        
                        if #targets == 0 then return end
                        
                        if sound.canCreate() then
                            local roar = sound.create(npc, "npc/combine_gunship/gunship_moan.wav", true)
                            roar:setSoundLevel( 100 )
                            roar:play()
                            roar:setVolume(1)
                            
                            timer.simple(sound.duration("npc/combine_gunship/gunship_moan.wav"), function()
                                roar:destroy()
                            end)
                        end
                        
                        local tar = targets[math.random(#targets)]
                        
                        for i=1, math.random(2 + npc.Phase*2,7 + npc.Phase*4) do
                            
                            Util.wait(0.25 + (math.random()*0.5 - npc.Phase*0.1))
                            Spawner.await()
                            
                            local Vehicle = tar:getVehicle()
                            local Vel
                            
                            if isValid(Vehicle) then
                                Vel = isValid(Vehicle:getParent()) and Vehicle:getParent():getVelocity() or Vehicle:getVelocity()
                            else
                                Vel = tar:getVelocity()
                            end
                            
                            
                            local Goal = tar:getPos()
                            local dist = LaunchPos:getDistance(Goal)
                            local steep = not isValid(tar:getVehicle()) --Goal.z < LaunchPos.z or dist < 1000
                            local speed = steep and (800 + dist/5) or (1600+npc.Phase*300)
                            local ttr = dist/speed
                            Goal = Goal + Vel*ttr * math.random(0.9, 1.1)
                            
                            if not isValid(Vehicle) then
                                Goal = Goal + Vector(math.random()-0.5, math.random()-0.5, 0)*125
                            end
                            
                            local p = Solver.getLaunchAngle( speed, Goal - LaunchPos, steep )
                            if p ~= p then return end
                            
                            local _, proj = pcall(function() return prop.create(LaunchPos, Angle(math.random(),math.random(),math.random())*360, "models/hunter/blocks/cube075x075x075.mdl", false) end)
                            if not isValid(proj) then break end
                            
                            proj:enableDrag(false)
                            proj:setMaterial("models/antlion/antlion_innards")
                            proj:setMass(5000)
                            proj:setCollisionGroup(COLLISION_GROUP.INTERACTIVE_DEBRIS)
                            
                            local nc = constraint.nocollide(proj, npc)
                            
                            timer.simple(1, function()
                                nc:remove()
                            end)
                            
                            
                            for i=1,3 do
                                local gunk = hologram.create(proj:getPos(), Angle(math.random(),math.random(),math.random())*360, "models/props_c17/canister_propane01a.mdl", Vector(1.7,1.7,0.4))
                                gunk:setMaterial("models/antlion/antlion_innards")
                                gunk:setParent(proj)
                            end
                            
                            
                            local launchAng = (Goal - LaunchPos):getAngle():setP(-math.deg(p))
                            launchAng = launchAng + Angle( math.random()-0.5, math.random()-0.5, 0 ) * (npc.Phase * 0.25)
                            
                            proj:getPhysicsObject():setVelocity( launchAng:getForward() * speed )
                            proj:setAngleVelocity( Vector(math.random()-0.5,math.random()-0.5,math.random()-0.5)*1000 )
                            
                            npc:emitSound("weapons/l4d2mw_shovel/impactflesh2.wav")
                            
                            proj:addCollisionListener(function( data )
                                Util.safeSpawn(function()
                                    proj:removeCollisionListener()
                                    
                                    if isValid(data.HitEntity) then
                                        NPC.applyDamage( data.HitEntity, 1000, proj, DAMAGE.BLAST )
                                        --data.HitEntity:applyDamage(1000, chip(), proj, DAMAGE.BLAST, proj:getPos())
                                    end
                                    
                                    if effect.canCreate() then
                                        local ef = effect.create()
                                        ef:setOrigin(proj:getPos())
                                        ef:setScale(500)
                                        ef:play("ThumperDust")
                                        
                                        for i=1, 3 do
                                            if effect.canCreate() then
                                                local ef = effect.create()
                                                ef:setOrigin(proj:getPos() + Vector(math.random()-0.5, math.random()-0.5, 0)*50)
                                                ef:play("AntlionGib")
                                            end
                                        end
                                    end
                                    
                                    pcall(function()
                                        local Emitter = hologram.create(proj:getPos(), Angle(), "models/hunter/blocks/cube025x025x025.mdl")
                                        
                                        Emitter:setNoDraw(true)
                                        
                                        Emitter:emitSound("physics/flesh/flesh_squishy_impact_hard3.wav")
                                        timer.simple(sound.duration("physics/flesh/flesh_squishy_impact_hard3.wav"), function()
                                            Emitter:remove()
                                        end)
                                    end)
                                    
                                    for i,v in pairs(NPC.Participants) do
                                        if isValid(v:getVehicle()) then continue end
                                        
                                        local dist = v:obbCenterW():getDistance( proj:getPos() )
                                        if dist > 400 then continue end
                                        
                                        local losCheck = trace.line( proj:getPos(), v:obbCenterW(), {proj, v} )
                                        local hasLoS = not losCheck.Hit
                                        local aoe = hasLoS and 400 or 200
                                        local baseDmg = hasLoS and 130 or 65
                                        
                                        local dmg = baseDmg * (1 - dist/aoe)
                                        
                                        if dmg <= 0 then continue end
                                        
                                        NPC.applyDamage( v, dmg, proj, DAMAGE.BLAST )
                                        --v:applyDamage(dmg, chip(), proj, DAMAGE.BLAST, proj:getPos())
                                    end
                                    
                                    timer.simple(0, function()
                                        if not isValid(proj) then return end
                                        proj:remove()
                                    end)
                                end)
                            end)
                        end
                    end
                }
            }
        })
        
        
    end
    
end

net.receive("nest_gib", function()
    if not effect.canCreate() then return end
    
    local ef = effect.create()
    ef:setOrigin(net.readVector())
    ef:play("AntlionGib")
end)

