--@name Health Bar v2
--@author shroobloom
--@client
--@include sb/rt_sprite.txt

-- used to be shared


--TODO: rework health bars
-- Ideally, they should function permanently for bosses and maintained via EntityNetworker, while still allowing temporary healthbars suck as for NPCs.
-- maybe it could be an object that is created on the entity, and dynamically creates/destroys an RT sprite stored inside it whenever its loaded/unloaded? that way health wont be forgotten after it is unloaded (i don't know if this is an issue or not)



if SERVER then
    --TODO: also send health in case it's not an NPC (and replace the npc/nextbot check with an IsChipNPC check)
    --[[hook.add("PostNPCTakeDamage", "npc_healthBar2_networkDamage", function( victim, attacker, inflictor, amount )
        --if not isValid(victim) or (not victim:isNPC() or not victim:isNextBot()) then return end
        --if not isValid(victim) or not victim.IsChipNPC then return end
        --if not isValid(attacker) or not attacker:isPlayer() then return end
        
        --TODO: dont send if attacker isnt a player
        print(victim, victim:getHealth(), victim:getMaxHealth(), amount)
        if not victim.Boss and (not isValid(attacker) or not attacker:isPlayer()) then return end 
        
        net.start("npc_healthBar2_damage")
        
        net.writeEntity(victim)
        net.writeEntity(attacker)
        
        if (not victim:isNPC() and not victim:isNextBot()) or victim:getClass() == "npc_barnacle" then --engine bug: barnacle health isn't networked
            net.writeFloat(victim:getHealth() - (victim.IsPropNPC and 0 or amount))
            net.writeFloat(victim:getMaxHealth())
        end
        
        if victim.Boss then
            -- broadcast to pvs
            net.sendPVS(victim:getPos(), true)
        else
            -- send only to attacker
            net.send(attacker)
        end
    end)]]
    
    --[[timer.simple(1, function()
        net.start("npc_healthBar2_damage")
        net.writeEntity(chip())
        net.writeFloat( 60 )
        net.writeFloat( 100 )
        net.send(owner())
    end)]]
end



--if CLIENT then
    local RTSprite = require("sb/rt_sprite.txt")
    local HealthBars = {}
    
    local HealthBar = class("HealthBar", RTSprite)
    
    local bossNameFont = render.createFont("Roboto Bk", 64, 1000)

    function HealthBar:initialize( ent )
        RTSprite.initialize( self )
        
        -- Removed Health and MaxHealth initializers
        
        self.HealthPercentLerped = 1
        self.LastPercent = 1
        self.DecayLevel = 1
        self.LastDamage = timer.curtime()
        self.FadeStart = nil
        self.FadeTime = nil
        self.DamageSegments = {}

        self.Boss = false
        self.Shake = 0

        self.Thickness = 30 + ent:obbSize().z * 0.5 --20 + self.Parent:obbSize():getLength() ^ (1/2) * 16 --self.Boss and 150 or 65 --self.Parent:obbSize():getLength() ^ (1/3) * 10
        
        ent.HealthBar = self
        self.Entity = ent
        
        self.StateID = 0
        self.StateTime = timer.curtime()
        
        self:setParent( ent )
        self:setOffset( Vector(0,0,ent:obbCenter().z + ent:obbSize().z/2) * 1.2 )
    end

    function HealthBar:takeDamage( amount )
        self.Health = self.Health - amount

        table.insert(self.DamageSegments, 1, {amount, timer.curtime()})
        self.Shake = math.max(self.Shake, amount / self:getMaxHealth() * (self.Boss and 1 or 0.2))
    end
    
    
    HealthBar.StateColors = {
        [1] = Color( 160,160,160 ),
        [2] = Color( 255,255,255 )
    }
    
    -- Flashes a certain state to the health bar, in most cases this takes the appearance of a colour change.
    -- 0: Default behaviour, no state
    -- 1: Damage was reduced
    -- 2: Damage was nullified
    -- 3: Unused
    function HealthBar:flashState( state )
        self.StateID = state
        self.StateTime = timer.curtime()
    end
    
    function HealthBar:getHealth()
        return self.Health or self.Parent:getHealth()
        
        --[[if self.Parent:isNPC() or self.Parent:isNextBot() then
            return self.Parent:getHealth()
        end
        
        return self.Health]]
    end
    
    function HealthBar:getMaxHealth()
        return self.MaxHealth or self.Parent:getMaxHealth()
        
        --[[if self.Parent:isNPC() or self.Parent:isNextBot() then
            return self.Parent:getMaxHealth()
        end
        
        return self.MaxHealth]]
    end
    
    function HealthBar:getPercent()
        return self:getHealth() / self:getMaxHealth()
    end
    
    -- multiplier
    function HealthBar:getLength()
        return 1 + math.sqrt(self:getMaxHealth()) * 0.05
    end
    
    function HealthBar:getLife()
        if self.FadeTime then
            return (timer.curtime() - self.FadeStart) / self.FadeTime
        end

        return 0
        --return (timer.curtime() - self.LastDamage)/3
    end

    function HealthBar:fadeOut( time )
        self.FadeTime = time
        self.FadeStart = timer.curtime()
        
        timer.create("npc_healthBar2_fadeOut_" .. self.ID, time, 1, function()
            self:remove()
        end)
    end
    
    function HealthBar:stopFade()
        self.FadeTime = nil
        self.FadeStart = nil
        
        timer.stop("npc_healthBar2_fadeOut_" .. self.ID)
    end
    
    function HealthBar:remove()
        timer.remove("npc_healthBar2_fadeOut_" .. self.ID)
        RTSprite.remove( self )
        self.Entity.HealthBar = nil
    end
    
    function HealthBar:render()

        --[[if isValid(self.Parent) and self.Parent:getClass() ~= "prop_physics" then
            local newHealth = self.Parent:getHealth()

            if newHealth ~= self:getHealth() then
                self:takeDamage( self:getHealth() - newHealth )
            end
        end]]

        local pc = self:getPercent()
        --self.HealthPercentLerped = math.lerp( timer.frametime()*2, self.HealthPercentLerped, pc )
        
        if pc ~= self.LastPercent then
            --local hpDiff = (self.LastPercent - pc) * self:getMaxHealth()
            
            --if hpDiff > 1 then --mostly to avoid burning from preventing decay
                self.LastDamage = timer.curtime()
            --end
            
            self.LastPercent = pc
        end
        
        if self.DecayLevel < pc then
            self.DecayLevel = pc
        end
        
        render.clear(Color(0,0,0,0))
        
        --self:setIgnoreZ( true )

        local length = self:getLength()
        --local length = (timer.curtime() - self.LastDamage)/2 + 0.05
        
        local h = self.Thickness/length

        self:setScale( length )
        
        -- background
        render.setColor(Color(0,0,0,144))
        render.drawRect( 8 - 4, 512 - h/2 - 4, 1008 + 8, h + 8 )
        
        --[[if pc ~= self.DecayLevel or pc == 0 then
            render.setColor(Color(255,144,0))
            render.drawRect( 8, 512 - h/2, 1008 * self.DecayLevel, h)
            
            local shake = pc == 0 and 1 or math.clamp((self.DecayLevel - pc)*18, 0, 1)
            
            self:setPos(Vector(math.random()-0.5, math.random()-0.5, math.random()-0.5) * 2 * shake)
            
            if timer.curtime() - self.LastDamage > 0.25 then
                self.DecayLevel = math.lerp(0.035, self.DecayLevel, pc)
                
                if math.abs(self.DecayLevel - pc) < 0.0001 then
                    self.DecayLevel = pc
                end
            end
        end]]

        self.Shake = self.Shake * 0.95
        self:setPos(Vector(math.random()-0.5, math.random()-0.5, math.random()-0.5) * 16 * self.Shake * length)
        


        local segXPc = pc

        if #self.DamageSegments > 0 then
            for i,v in pairs(self.DamageSegments) do
                local fade = math.min((timer.curtime() - v[2])*3, 1)
                
                local segWPc = v[1] / self:getMaxHealth()
                local segH = h * (1 + fade*(1 + v[1]/self:getMaxHealth() * 40))
                
                render.setColor(Color(255,255,255, 255*(1-fade)))
                render.drawRect( 8 + segXPc * 1008, 512 - segH/2, segWPc * 1008, segH )
                segXPc = segXPc + segWPc
            end

            for i=#self.DamageSegments, 1, -1 do
                local v = self.DamageSegments[i]

                if timer.curtime() - v[2] > 1/3 then
                    table.remove(self.DamageSegments, i)
                end
            end
        end

        
        local color = Color(255,0,0)
        
        
        -- foreground bar
        render.setColor(color)
        render.drawRect( 8, 512 - h/2, 1008 * pc, h )

        local stateColorMod = HealthBar.StateColors[self.StateID]
        
        if stateColorMod then
            --[[local time = math.min((timer.curtime() - self.StateTime) / 0.5, 1)
            color = Color(
                math.lerp( time, stateColorMod.r, color.r ),
                math.lerp( time, stateColorMod.g, color.g ),
                math.lerp( time, stateColorMod.b, color.b )
            )]]
            
            local time = math.min((timer.curtime() - self.StateTime) / 0.25, 1)^3
            render.setColor(stateColorMod:clone():setA( (1-time)*255 ))
            render.drawRect( 8, 512 - h/2, 1008 * pc, h )
        end
        
        -- text
        if self.Boss then
            render.setFont(bossNameFont)
            render.setColor(Color(255,255,255))

            local text = self.Name:upper()
            --text = table.concat(string.split(text, ""), " ")

            render.drawSimpleText( 512, 512 - h/2 - 10, text, TEXT_ALIGN.CENTER, TEXT_ALIGN.BOTTOM )
        end

        local life = self:getLife()
        local fade = math.min(life, 1) --math.clamp((life-0.8)*5, 0, 1)
        
        self.Holo:setColor(Color(255,255,255,(1-fade)*254))
    end
    
    
    
    function HealthBar:decoupleAndFade( time )
        self:takeDamage( self.Health )
        self:setParent( nil )
        self:setOffset( self.Entity:getPos() + self.Offset )
        self:fadeOut( time or 0.2 )
        self.Entity.HealthBar = nil
    end
    
    
    hook.add("EntityRemoved", "npc_healthBar2_removeDeadHealthbars", function(ent)
        if not ent or not ent.HealthBar then return end
        
        --ent.HealthBar:remove()
        --ent.HealthBar = nil
    
        ent.HealthBar:decoupleAndFade()
    end)
    
    --[[timer.create("npc_healthBar2_removeOldHealthbars", 0.25, 0, function()
        for ent,v in pairs(HealthBars) do
            if v:getLife() < 1 then continue end
            
            v:remove()
            HealthBars[ent] = nil
        end
    end)]]
    
    --TODO: resort render priority when a new health bar is created so it doesn't get delayed
    --[[net.receive("npc_healthBar2_damage", function()
        local e = net.readEntity()
        if not isValid(e) then return end
        
        local attacker = net.readEntity()
        
        local hp = net.readFloat()
        local hpMax = net.readFloat()
        
        if HealthBars[e] then
            HealthBars[e].Health = hp
            HealthBars[e].MaxHealth = hpMax
        elseif attacker == player() then
            local pc = hp/hpMax
            
            local new = HealthBar:new( e )
            new.Health = hp
            new.MaxHealth = hpMax
            new.HealthPercentLerped = pc
            new.LastPercent = pc
            new.DecayLevel = pc
            
            new:setScale( new:getLength() )
            
            HealthBars[e] = new
        end
    end)]]
--end



return HealthBar
