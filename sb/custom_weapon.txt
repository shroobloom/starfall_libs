--@name Custom Weapon Library
--@author shroobloom
--@server



local Weapon = class("CustomWeapon")
Weapon.Info = {}
Weapon.HideWeapon = true


-- TODO LIST
-- [ ] Animations self:playAnimation( ... )
--      - If used on the client, calls setAnimation
--      - If used on the server, tells all clients other than the owner to call setAnimation
--      - Unsure how to make sure weapons are networked properly, can the creation order be trusted so that variants are synced?
--          - could maybe just Trust:tm:



function Weapon:initialize( Wielder )
    self.Owner = Wielder
    self.Equipped = false
    
    self.Parts = {}
    
    if not Weapon.Info[Wielder] then
        Weapon.Info[Wielder] = {}
    end
    
    for i,v in pairs(self.Classes) do
        if not Weapon.Info[Wielder][v] then
            Weapon.Info[Wielder][v] = {
                Variant = 1,
                Variants = {}
            }
        end
        
        print("Added " .. v .. " variant: " .. self.class.name)
        table.insert(Weapon.Info[Wielder][v].Variants, self)
    end
end


-- Static
function Weapon.static:getHolding( Player )
    if not Weapon.Info[Player] then return end
    
    local wep = Player:getActiveWeapon()
    if not isValid(wep) then return nil end
    
    local Info = Weapon.Info[Player][wep:getClass()]
    if not Info then return end
    
    return Info.Variants[Info.Variant]
end


--TODO: fix this
function Weapon:subclassed( child )
    child.Classes = {}
end



-- Abstract
-- Insert all created holograms into self.Parts for safe removal
function Weapon:createModel()
end


function Weapon:removeModel()
    for i,v in pairs(self.Parts) do
        if isValid(v) then v:remove() end
    end
    
    table.empty(self.Parts)
end



-- Static
function Weapon.static:addClass( Class )
    table.insert(self.Classes, Class)
end



function Weapon:equip()
    if self.Equipped then return end
    
    self.Equipped = true
    self:createModel()
end



function Weapon:unequip()
    if not self.Equipped then return end
    
    self.Equipped = false
    self:removeModel()
end



-- Abstract
function Weapon:primaryFire()
    
end



-- Abstract
function Weapon:onAnimationEvent( id, data )
end

hook.add("DoAnimationEvent", "CustomWeapon_AnimationEventDetection", function(ply, event, data)
    if not Weapon.Info[ply] then return end
    
    local wep = ply:getActiveWeapon()
    if not isValid(wep) then return end
    
    local Info = Weapon.Info[ply][wep:getClass()]
    if not Info then return end
    
    local Instance = Info.Variants[Info.Variant]
    Instance:onAnimationEvent( event, data )
end)



-- Abstract
function Weapon:secondaryFire()
    
end



function Weapon:getBone()
    return self.Owner:lookupBone("ValveBiped.Bip01_R_Hand")
end

function Weapon:localToWorld( Pos, Ang )
    --local bonePos, boneAng = self.Owner:getBonePosition( self:getBone() )
    local Phys = self.Owner:getActiveWeapon()
    
    return localToWorld( Pos, Ang or Angle(), Phys:getPos(), Phys:getAngles() )
end


function Weapon:addPart( Holo )
    table.insert(self.Parts, Holo)
    Holo:setParent( self.Owner, nil, self:getBone() )
end



hook.add("PlayerSwitchWeapon", "CustomWeapon_SwitchWeapon", function(ply, oldWep, newWep)
    
    if not Weapon.Info[ply] then return end
    
    
    if isValid(oldWep) then
        local Old = Weapon.Info[ply][oldWep:getClass()]
        
        if Old then
            local OldInstance = Old.Variants[Old.Variant]
            if OldInstance.class.HideWeapon then
                pcall(function()
                    oldWep:setNoDraw( false )
                end)
            end
            
            OldInstance:unequip()
        end
    end
    
    
    if isValid(newWep) then
        local New = Weapon.Info[ply][newWep:getClass()]
        
        if New then
            local NewInstance = New.Variants[New.Variant]
            
            if NewInstance.class.HideWeapon then
                timer.simple(0, function()
                    pcall(function()
                        newWep:setNoDraw( true )
                    end)
                end)
            end
            
            NewInstance:equip()
        end
    end
    
end)



hook.add("KeyPress", "CustomWeapon_SwitchVariant", function( ply, key )
    if key ~= 8192 then return end
    
    if not Weapon.Info[ply] then return end
    
    local wep = ply:getActiveWeapon()
    if not isValid(wep) then return end
    
    local Info = Weapon.Info[ply][wep:getClass()]
    if not Info or #Info.Variants == 1 then return end
    
    local OldInstance = Info.Variants[Info.Variant]
    
    Info.Variant = Info.Variant + 1
    
    if Info.Variant > #Info.Variants then
        Info.Variant = 1
    end
    
    OldInstance:unequip()
    Info.Variants[Info.Variant]:equip()
    
end)



hook.add("KeyPress", "CustomWeapon_Fire", function( ply, key )
    if key ~= 1 and key ~= 2048 then return end
    
    if not Weapon.Info[ply] then return end
    
    local wep = ply:getActiveWeapon()
    if not isValid(wep) then return end
    
    local Info = Weapon.Info[ply][wep:getClass()]
    if not Info then return end
    
    local Instance = Info.Variants[Info.Variant]
    
    --TODO: cooldowns
    if key == 1 then
        Instance:primaryFire()
    elseif key == 2048 then
        Instance:secondaryFire()
    end
    
end)





return Weapon
