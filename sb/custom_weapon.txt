--@name Custom Weapon Library
--@author shroobloom
--@server
--@include sb/chat_command.txt


local Weapon = class("CustomWeapon")
Weapon.Info = {}
Weapon.HideWeapon = true
Weapon.Types = {}


-- TODO LIST
-- [ ] Animations self:playAnimation( ... )
--      - If used on the client, calls setAnimation
--      - If used on the server, tells all clients other than the owner to call setAnimation
--      - Unsure how to make sure weapons are networked properly, can the creation order be trusted so that variants are synced?
--          - could maybe just Trust:tm:




local ChatCommands = require("sb/chat_command.txt")

ChatCommands:add({
    Name = "givecustom",
    Description = "Gives a custom weapon with a certain ID to a player.",
    Arguments = {
        {
            Name = "Target",
            Type = "player",
            Optional = true
        },
        {
            Name = "ID",
            Type = "string",
            Optional = true,
            Validator = function(str)
                if not Weapon.Types[str] then
                    return ChatCommands.Error("No weapon with ID \"" .. str .. "\" found!")
                end
            end
        }
    },
    Run = function( user, target, id )
        
        if not id then
            local wep = Weapon:getHolding( user )
            if not wep then
                return ChatCommands.Error("No valid weapon ID found!")
            end
            
            id = wep.class.name
        end
        
        if not target then
            target = user:getEyeTrace().Entity
            
            if not isValid(target) or not target:isPlayer() then
                return ChatCommands.Error("No valid target found!")
            end
        end
        
        Weapon.Types[id]:new( target )
        user:chatPrint(Color(40,255,30), "Gave \"" .. id .. "\" to " .. target:getName() .. "!")
        
    end
})

ChatCommands:add({
    Name = "stripcustom",
    Description = "Takes a custom weapon with a certain ID to a player, or all weapons if no ID is specified.",
    Arguments = {
        {
            Name = "Target",
            Type = "player"
        },
        {
            Name = "ID",
            Type = "string",
            Optional = true,
            Validator = function(str)
                if not Weapon.Types[str] then
                    return ChatCommands.Error("No weapon with ID \"" .. str .. "\" found!")
                end
            end
        }
    },
    Run = function( user, target, id )
        
        local toStrip = {}
        
        for clazz,data in pairs(Weapon.Info[target] or {}) do
            for i,variant in pairs(data.Variants) do
                if id and variant.class.name ~= id then continue end
                
                table.insert(toStrip, variant)
            end
        end
        
        for i=#toStrip, 1, -1 do
            toStrip[i]:remove()
        end
        
        
        if id then
            if #toStrip == 0 then
                return ChatCommands.Error("Player does not have that custom weapon!")
            end
            
            user:chatPrint(Color(40,255,30), "Stripped \"" .. id .. "\" from " .. target:getName() .. "!")
        else
            if #toStrip == 0 then
                return ChatCommands.Error("Player does not have any custom weapons!")
            end
            
            user:chatPrint(Color(40,255,30), "Stripped all custom weapons from " .. target:getName() .. "!")
        end
    end
})



ChatCommands:add({
    Name = "whohas",
    Description = "Returns who has a certain weapon (or all, if no ID is specified)",
    Arguments = {
        {
            Name = "ID",
            Type = "string",
            Optional = true,
            Validator = function(str)
                if not Weapon.Types[str] then
                    return ChatCommands.Error("No weapon with ID \"" .. str .. "\" found!")
                end
            end
        }
    },
    Run = function( user, id )
        
        local has = {}
        
        for plr,v in pairs(Weapon.Info) do
            for clazz,data in pairs(v) do
                for i,variant in pairs(data.Variants) do
                    if id and variant.class.name ~= id then continue end
                    
                    if not has[plr] then
                        has[plr] = {}
                    end
                    
                    if table.hasValue(has[plr], variant.class.name) then continue end
                    table.insert(has[plr], variant.class.name)
                end
            end
        end
        
        user:chatPrint(Color(255,144,0), "All weapons:")
        
        for plr,list in pairs(has) do
            user:chatPrint( ChatCommands.BULLET_COLOR, ChatCommands.BULLET, team.getColor(plr:getTeam()), " " .. plr:getName(), ChatCommands.BULLET_COLOR, " - ", Color(255,255,255), table.concat(list, ", ") )
        end
        
    end
})







function Weapon:initialize( Wielder )
    self.Owner = Wielder
    self.Equipped = false
    
    self.Parts = {}
    
    if not Weapon.Info[Wielder] then
        Weapon.Info[Wielder] = {}
    end
    
    for i,v in pairs(self.Classes) do
        if not Weapon.Info[Wielder][v] then
            Weapon.Info[Wielder][v] = {
                Variant = 1,
                Variants = {}
            }
        end
        
        Wielder:chatPrint("Added " .. v .. " variant: " .. self.class.name)
        table.insert(Weapon.Info[Wielder][v].Variants, self)
        
        Wielder:give(v)
    end
end


-- causes really weird bugs
--[[
hook.add("PlayerSpawn", "CustomWeapon_GiveOnSpawn", function( plr )
    if not Weapon.Info[plr] then return end
    
    timer.simple(0, function()
        if not isValid(plr) or not Weapon.Info[plr] then return end
        
        for clazz,v in pairs(Weapon.Info[plr]) do
            plr:give(clazz)
        end
    end)
end)
]]



-- also remove the holos? call removeModel? idk
function Weapon:remove()
    local classes = Weapon.Info[self.Owner]
    
    for i,v in pairs(classes) do
        table.removeByValue(v.Variants, self)
        
        if #v.Variants == 0 then
            classes[i] = nil
        elseif v.Variant > #v.Variants then
            v.Variant = #v.Variants
        end
    end
end


-- Static
-- If another class is used, it'll only pick up that class
function Weapon.static:getHolding( Player )
    if not Weapon.Info[Player] then return end
    
    local wep = Player:getActiveWeapon()
    if not isValid(wep) then return nil end
    
    local Info = Weapon.Info[Player][wep:getClass()]
    if not Info then return end
    
    local wep = Info.Variants[Info.Variant]
    if wep.class == self or wep.class:isSubclassOf( self ) then return wep end
    
    return nil
end



function Weapon.static:subclassed( child )
    child.Classes = {}
    Weapon.Types[child.name] = child
end



-- Abstract
-- Insert all created holograms into self.Parts for safe removal
function Weapon:createModel()
end


function Weapon:removeModel()
    for i,v in pairs(self.Parts) do
        if isValid(v) then v:remove() end
    end
    
    table.empty(self.Parts)
end



-- Static
function Weapon.static:addClass( Class )
    table.insert(self.Classes, Class)
end



function Weapon:equip()
    if self.Equipped then return end
    
    self.Equipped = true
    self:createModel()
end



function Weapon:unequip()
    if not self.Equipped then return end
    
    self.Equipped = false
    self:removeModel()
end



-- Abstract
function Weapon:primaryFire()
    
end



-- Abstract
function Weapon:onAnimationEvent( id, data )
end

hook.add("DoAnimationEvent", "CustomWeapon_AnimationEventDetection", function(ply, event, data)
    if not Weapon.Info[ply] then return end
    
    local wep = ply:getActiveWeapon()
    if not isValid(wep) then return end
    
    local Info = Weapon.Info[ply][wep:getClass()]
    if not Info then return end
    
    local Instance = Info.Variants[Info.Variant]
    Instance:onAnimationEvent( event, data )
end)



-- Abstract
function Weapon:secondaryFire()
    
end



function Weapon:getBone()
    return self.Owner:lookupBone("ValveBiped.Bip01_R_Hand")
end

function Weapon:localToWorld( Pos, Ang )
    --local bonePos, boneAng = self.Owner:getBonePosition( self:getBone() )
    
    -- this method no longer works
    --[[local Phys = self.Owner:getActiveWeapon()
    
    return localToWorld( Pos, Ang or Angle(), Phys:getPos(), Phys:getAngles() )]]
    
    
    local bonePos, boneAng = self.Owner:getBonePosition( self:getBone() )
    return localToWorld( Pos, Ang or Angle(), bonePos, boneAng )
    
end


function Weapon:addPart( Holo )
    table.insert(self.Parts, Holo)
    Holo:setParent( self.Owner, nil, self:getBone() )
    Holo:setScale( Holo:getScale() * self.Owner:getModelScale() )
end



--TODO: untested
function Weapon.static:getActiveWeapon( plr )
    
    if not Weapon.Info[ply] then return nil end
    
    local sourceSwep = ply:getActiveWeapon()
    if not isValid(sourceSwep) then return nil end
    
    local Info = Weapon.Info[ply][sourceSwep:getClass()]
    if not Info then return nil end
    
    return Info.Variants[Info.Variant]
    
end



hook.add("PlayerSwitchWeapon", "CustomWeapon_SwitchWeapon", function(ply, oldWep, newWep)
    
    if not Weapon.Info[ply] then return end
    
    
    if isValid(oldWep) then
        local Old = Weapon.Info[ply][oldWep:getClass()]
        
        if Old then
            local OldInstance = Old.Variants[Old.Variant]
            if OldInstance.class.HideWeapon then
                pcall(function()
                    oldWep:setNoDraw( false )
                end)
            end
            print("Unequip ", oldWep)
            OldInstance:unequip()
        end
    end
    
    
    if isValid(newWep) then
        local New = Weapon.Info[ply][newWep:getClass()]
        
        if New then
            local NewInstance = New.Variants[New.Variant]
            
            if NewInstance.class.HideWeapon then
                timer.simple(0, function()
                    pcall(function()
                        newWep:setNoDraw( true )
                    end)
                end)
            end
            
            timer.simple(0, function()
                NewInstance:equip()
            end)
        end
    end
    
end)



hook.add("KeyPress", "CustomWeapon_SwitchVariant", function( ply, key )
    if key ~= 8192 then return end
    
    if not Weapon.Info[ply] then return end
    
    local wep = ply:getActiveWeapon()
    if not isValid(wep) then return end
    
    local Info = Weapon.Info[ply][wep:getClass()]
    if not Info or #Info.Variants == 1 then return end
    
    local OldInstance = Info.Variants[Info.Variant]
    
    Info.Variant = Info.Variant + 1
    
    if Info.Variant > #Info.Variants then
        Info.Variant = 1
    end
    
    OldInstance:unequip()
    Info.Variants[Info.Variant]:equip()
    
end)



hook.add("KeyPress", "CustomWeapon_Fire", function( ply, key )
    if key ~= 1 and key ~= 2048 then return end
    
    if not Weapon.Info[ply] then return end
    
    local wep = ply:getActiveWeapon()
    if not isValid(wep) then return end
    
    local Info = Weapon.Info[ply][wep:getClass()]
    if not Info then return end
    
    local Instance = Info.Variants[Info.Variant]
    
    --TODO: cooldowns
    if key == 1 then
        Instance:primaryFire()
    elseif key == 2048 then
        Instance:secondaryFire()
    end
    
end)





return Weapon
