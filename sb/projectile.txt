--@name Projectile
--@author shroobloom
--@server
--@include sb/spawner.txt
--@include sb/util.txt



local Spawner = require("sb/spawner.txt")
local Util = require("sb/util.txt")


local Projectile = class("Projectile")
Projectile.Instances = {}


--NOTE: Wire Simple Explosives have a hard-coded detonate cooldown of 0.2s. 
--      If you detonate projectiles at a faster rate, some will just not deal damage.
--      This is a known bug, but I have no intention on fixing it at the moment.




function Projectile._spawnWireExplosive()
    if isValid(Projectile.BOMB) then
        Projectile.BOMB:remove()
    end
    
    Projectile.BOMB = prop.createSent( Vector(), Angle(), "gmod_wire_simple_explosive", true, {
        damage = 500,
        radius = 512,
        
        Model = "models/hunter/blocks/cube4x4x4.mdl"
    })
    
    Projectile.BOMB:setSolid(false)
    Projectile.BOMB:setNoDraw(true)
    Projectile.BOMB:setNocollideAll(true)
    Projectile.BOMB:doNotDuplicate()
    Projectile.BOMB:setMass(50000)
end

Spawner.Enqueue(Projectile._spawnWireExplosive)




local PropertyDefaults = {
    Model = "models/props_c17/canister02a.mdl",
    ModelAngle = Angle(90,0,0),
    
    Speed = 0,
    Thrust = 0,
    Gravity = true,
    
    ExplosionEffect = "lfs_missile_explosion",
    
    Trail = {
        Material = "", --trails/smoke
        StartSize = 10,
        EndSize = 30,
        Length = 0.1, --Duration
        Color = Color(255,255,255),
        Additive = false
    }
}


function Projectile:initialize( pos, ang, properties )
    
    Util.applyDefaults( properties, PropertyDefaults )
    
    self.Instance = prop.create( pos, ang + properties.ModelAngle, properties.Model, false )
    self.Instance:setUnbreakable( true )
    self.Instance:enableDrag( false )
    self.Instance:enableGravity( properties.Gravity )
    self.Instance:doNotDuplicate()
    
    self.Instance:applyForceCenter( ang:getForward() * properties.Speed * self.Instance:getMass() )
    
    self.Instance:addCollisionListener(function( hit )
        self:detonate()
    end)
    
    self.Instance.Projectile = self
    
    self.Thrust = properties.Thrust
    self.ExplosionEffect = properties.ExplosionEffect
    
    if properties.Trail.Material ~= "" then
        self.Instance:setTrails(properties.Trail.StartSize, properties.Trail.EndSize, properties.Trail.Length, properties.Trail.Material, properties.Trail.Color, nil, properties.Trail.Additive)
    end
    
    table.insert(Projectile.Instances, self)
    
end


function Projectile:think()
    
    if self.Thrust > 0 then
        self.Instance:applyForceCenter( self.Instance:getUp() * self.Thrust * self.Instance:getMass() )
    end
    
end


function Projectile:detonate()
    
    -- If the bomb was destroyed, respawn it then try again:
    if not isValid(Projectile.BOMB) then
        Spawner.Enqueue(function()
            if not isValid(Projectile.BOMB) then
                Projectile._spawnWireExplosive()
            end
            
            self:detonate()
        end)
        
        return
    end
    
    Projectile.BOMB:setPos( self.Instance:getPos() )
    Projectile.BOMB:getWirelink().Detonate = 1
    Projectile.BOMB:getWirelink().Detonate = 0
    Projectile.BOMB:setPos( Vector() )
    
    if self.ExplosionEffect ~= "" then
        local ef = effect.create()
        ef:setOrigin(self.Instance:getPos())
        ef:play(self.ExplosionEffect)
    end
    
    self:remove()
end



function Projectile:remove()
    if isValid(self.Instance) then
        self.Instance.Projectile = nil
        self.Instance:remove()
    end
    
    table.removeByValue(Projectile.Instances, self)
end




hook.add("think", "Projectile_Think", function()
    for i,v in pairs(Projectile.Instances) do
        v:think()
    end
end)


hook.add("EntityRemoved", "Projectile_Removal", function( e )
    if e:getOwner() ~= owner() then return end
    if not e.Projectile then return end
    
    e.Projectile:remove()
end)



--[[
--timer.simple(1, function()
timer.create("machinegun mode", 0.3, 0, function()
    
    local p = Projectile:new( chip():getPos() + Vector(0,0,60), owner():getEyeAngles(), {
        Speed = 5000,
        
        ExplosionEffect = "",
        
        Trail = {
            Material = "trails/smoke"
        }
    })
    
end)]]



return Projectile

