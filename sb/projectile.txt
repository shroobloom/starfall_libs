--@name Projectile
--@author shroobloom
--@server
--@include sb/util.txt
--@include sb/spawner.txt
--@include sb/precacher.txt



local Util = require("sb/util.txt")
local Spawner = require("sb/spawner.txt")
local Precacher = require("sb/precacher.txt")


local Projectile = class("Projectile")
Projectile.Instances = {}
Projectile.ExplosivePrecacher = Precacher:new( "models/props_c17/oildrum001_explosive.mdl", 0 ) --Change this object's "Size" variable to precache explosives



--TODO:
-- [ ] Missiles should lose their target if they die, also, they'd try to go back to their LaunchAngle, which is bad.
-- [X] Arc mode, they should do a big arc to reach their target if this is on
-- [X] A ThrustMax and ThrustRampupTime variable to allow the rockets to move faster the longer they're alive for
-- [X] Projectiles should have a Lifetime property, and explode (or lose fuel?) after they live for long enough
-- [X] Projectiles should allow for multiple explosives to detonate
-- [ ] Sometimes guidance screws up and causes the missile to loop around. this is not a quirk of wobble, its likely only when its going straight down and has to change yaw
-- [~] Fix delta silo to not be explosion ratelimited
-- [ ] Particles (for rocket trails) (also ensure they have a clientmain or something?) (also make it possible to load existing particle systems?)



local PropertyDefaults = {
    Model = "models/props_c17/oildrum001_explosive.mdl",
    ModelAngle = Angle(90,0,0),
    
    Enabled = true,
    
    -- Initial velocity - the projectile will have this velocity on launch
    -- The max speed for a projectile is equal to physenv.getPerformanceSettings().MaxVelocity, which is ~2966 at the time of writing on CFC.
    Speed = 0,
    
    -- The amount to randomly spread shots on fire
    -- In degrees
    Spread = 0,
    
    -- Constant thrust - the projectile will try to maintain this speed
    Thrust = 0,
    
    -- Maximum thrust and thrust rampup - the projectile will slowly ramp up to this thrust level as it's existed for up to its rampup time
    -- Similar to how the LFS Rocket Launcher will speed up as it's been chasing the target for longer. Good for versatile weapons.
    ThrustMax = nil,
    ThrustRampupTime = 10,
    
    Gravity = true,
    
    -- Explosion effect
    -- Change the properties to know
    ExplosionEffect = {
        Name = "glide_explosion",
        Scale = 1,
        Radius = 1,
        Magnitude = 1
    },
    
    -- Override to change behaviour
    playExplosionEffect = function( self )
        local ef = effect.create()
        ef:setOrigin( self.Instance:getPos() )
        ef:setScale( self.ExplosionEffect.Scale )
        ef:setRadius( self.ExplosionEffect.Radius )
        ef:setMagnitude( self.ExplosionEffect.Magnitude )
        ef:play( self.ExplosionEffect.Name )
    end,
    
    Trail = {
        Material = "", --trails/smoke
        StartSize = 10,
        EndSize = 75,
        Length = 0.25, --Duration
        Color = Color(255,255,255),
        Additive = false
    },
    
    -- Causes the projectile to spiral as it flies through the air. (TODO: rename?)
    Wobble = {
        Speed = 0,
        Power = 0
    },
    
    -- Homing properties (TODO: UNIMPLEMENTED)
    Homing = {
        TurnForce = 0 --TODO: implement
    },
    
    -- If true, the projectile will turn to face its current velocity
    -- Has no effect on homing projectiles.
    FinStabilized = true,
    
    -- If set, causes the missiles to curve to their target instead of flying directly at them at a specific height.
    ArcHeight = nil,
    
    -- After this duration, the projectile will self-destruct
    Lifetime = 30,
    
    -- The number of supplementary explosives to spawn
    -- NOTE: Allow some time after creating the projectile for these explosives to be created
    -- You may check if all supplementary explosives are spawned by reading "Ready"
    ExplosionPower = 0,
    
    -- The number of times this projectile can bounce
    MaxBounce = 0,
    
    -- The max angle this projectile can bounce from, 0-90, 0 = perpendicular, 90 = parallel
    -- TODO: Unimplemented
    MaxBounceAngle = 90,
    
    -- Override to determine whether or not the projectile should bounce
    shouldBounce = function( self, hit )
        if self.BouncesLeft == 0 then return false end
        
        local angle = 0 --TODO
        
        return true
    end,
    
    -- Override to replace the default bounce and impact behaviour.
    onCollide = function( self, hit )
        if self:shouldBounce( hit ) then
            self.BouncesLeft = self.BouncesLeft - 1
            
            local curVel = hit.OurOldVelocity --self.Instance:getVelocity()
            local reflected = curVel - 2 * (curVel:dot(hit.HitNormal)) * hit.HitNormal
            
            self.Instance:setAngles( reflected:getAngle() - self.ModelAngle )
            self.Instance:getPhysicsObject():setVelocity( reflected  )
            self.Instance:setAngleVelocity( Vector() )
            
            return
        end
        
        --if true then return end
        
        self:detonate( nil, hit )
    end
}



function Projectile:initialize( pos, ang, properties )
    
    Util.applyDefaults( properties, PropertyDefaults )
    
    for i,v in pairs(properties) do
        self[i] = v
    end
    
    
    local _, effectiveAng = localToWorld( Vector(), self.ModelAngle, Vector(), ang )
    
    self.Instance = prop.create( pos, effectiveAng, properties.Model, false )
    self.Instance:enableDrag( false )
    self.Instance:enableGravity( properties.Gravity )
    self.Instance:doNotDuplicate()
    self.Instance:setMass(1) --just so impacts dont kill
    
    self.Instance:setPhysMaterial("gmod_bouncy") --TODO: test
    
    --local obbSize = self.Instance:obbSize()
    --self.Instance:enableSphere( true, math.max(obbSize.x, obbSize.y, obbSize.z)/2 )
    
    self.Instance.Projectile = self
    
    self.Detonated = false
    self.Target = nil --Either a Vector or an Entity
    
    --TODO: configuration
    self.WobbleSeed = math.random()*math.pi
    self.WobbleDir = math.sign(math.random()-0.5)
    self.Ready = self.ExplosionPower == 0
    
    self.BouncesLeft = properties.MaxBounce
    
    if properties.Enabled then
        self.Enabled = false
        self:fire()
    end
    
    table.insert(Projectile.Instances, self)
    
    
    self.SupplementaryExplosives = {}
    
    if self.ExplosionPower > 0 then
        Util.spawn(function()
            Projectile.ExplosivePrecacher:takePropsAsync( self.ExplosionPower, function( ent )
                if not self:isValid() then return true end
                table.insert(self.SupplementaryExplosives, ent)
            end)
            
            self.Ready = true
            
            print("precache async done, total props: ", #self.SupplementaryExplosives)
            
            if self.AwaitingSupplementaryThread then
                coroutine.resume(self.AwaitingSupplementaryThread)
            end
        end)
    end
end


function Projectile:awaitSupplementarySpawns()
    if self.Ready then return end
    
    self.AwaitingSupplementaryThread = coroutine.running()
    coroutine.yield()
end



function Projectile:fire()
    assert(not self.Enabled, "Projectile has already been fired!")
    
    -- Correct position/velocity
    if isValid(self:getParent()) then
        local Parent = self:getParent()
        local LocalPos = Parent:worldToLocal(self.Instance:getPos())
        self:setParent( nil )
        self.Instance:setPos(Parent:localToWorld(LocalPos))
        
        local Grandparent = Util.getGrandparent( Parent )
        
        timer.simple(0, function()
            if not isValid(Grandparent) or not self:isValid() then return end
            self.Instance:getPhysicsObject():addVelocity(Grandparent:getPhysicsObject():getVelocityAtPoint( self.Instance:getPos() ))
        end)
    end
    
    if self:isFrozen() then
        self:setFrozen( false )
    end
    
    self.LaunchTime = timer.curtime()
    self.LaunchPos = self.Instance:getPos()
    self.LaunchAngle = self.Instance:getAngles() + self.ModelAngle
    self.Enabled = true
    
    local dir = self:getForward()
    
    if self.Spread ~= 0 then
        --dir = (dir:getAngle() + Angle(math.random()-0.5, math.random()-0.5, math.random()-0.5) * 2 * self.Spread):getForward()
        local dirAng = dir:getAngle()
        local off = Angle(math.random()-0.5, math.random()-0.5, math.random()-0.5) * 2 * self.Spread
        local _, newAngle = localToWorld(Vector(), dirAng, Vector(), off)
        
        dir = newAngle:getForward()
        self.Instance:setAngles( newAngle - self.ModelAngle )
    end
    
    self.Instance:applyForceCenter( dir * self.Speed * self.Instance:getMass() )
    
    if self.Trail.Material ~= "" then
        self.Instance:setTrails(self.Trail.StartSize, self.Trail.EndSize, self.Trail.Length, self.Trail.Material, self.Trail.Color, nil, self.Trail.Additive)
    end
    
    self.Instance:addCollisionListener(function( hit )
        if self.Detonated or hit.HitEntity.Projectile then return end
        self:onCollide( hit )
    end)
end


function Projectile:getTargetPos()
    return type(self.Target) == "Vector" and self.Target or self.Target:obbCenterW()
end


function Projectile:setFrozen( state )
    self.Instance:setFrozen( state )
end

function Projectile:isFrozen()
    return self.Instance:isFrozen()
end

function Projectile:setParent( ent )
    self.Instance:setParent( ent )
end

function Projectile:getParent()
    return self.Instance:getParent()
end



function Projectile:getForward()
    return self.Instance:localToWorldVector( self.ModelAngle:getForward() )
end


-- Runs 10 times/s to allow for a ton of projectiles and still being performant
function Projectile:think()
    if not self.Enabled then return end
    
    if type(self.Target) ~= "Vector" and not isValid(self.Target) then
        self.Target = nil
    end
    
    if timer.curtime() - self.LaunchTime > self.Lifetime then
        return self:detonate()
    end
    
    if self.Thrust > 0 then
        local curThrust = self.Thrust
        
        if self.MaxThrust then
            local accel = math.clamp((timer.curtime() - self.LaunchTime) / self.ThrustRampupTime, 0, 1)
            curThrust = math.lerp(accel, self.Thrust, self.MaxThrust or self.Thrust)
        end
        
        
        self.Instance:applyForceCenter( (self:getForward()*curThrust - self.Instance:getVelocity()*1) * self.Instance:getMass() )
    end
    
    
    
    local targetAngle = self.LaunchAngle
    
    if self.Target then
        local targetPos = self:getTargetPos()
        
        if self.ArcHeight then
            local tpz0 = targetPos:clone():setZ(0)
            local lpz0 = self.LaunchPos:clone():setZ(0)
            
            local startDist = tpz0:getDistance(lpz0)
            local currentDist = tpz0:getDistance( self.Instance:getPos():setZ(0) )
            local alpha = 1 - math.clamp(currentDist / startDist, 0, 1)
            local mid = (self.LaunchPos + targetPos)/2
            mid:setZ( math.max(self.LaunchPos.z, targetPos.z) + self.ArcHeight )
            
            targetPos = math.bezierVector( alpha + 0.1, self.LaunchPos, mid, targetPos )
        end
        
        targetAngle = (targetPos - self.Instance:getPos()):getAngle()
    elseif self.FinStabilized then
        targetAngle = self.Instance:getVelocity():getAngle() - self.ModelAngle
    end
    
    if self.Wobble.Frequency ~= 0 then
        targetAngle = targetAngle + Angle(
            math.sin( timer.curtime()*math.pi*self.Wobble.Speed*self.WobbleDir + self.WobbleSeed )*self.Wobble.Power,
            math.cos( timer.curtime()*math.pi*self.Wobble.Speed*self.WobbleDir + self.WobbleSeed )*self.Wobble.Power,
            0
        ) * math.min( (timer.curtime() - self.LaunchTime), 1 )
    end
    
    
    if targetAngle ~= self.LaunchAngle then
        local inertiaVec = self.Instance:getInertia()
        local inertia = Angle( inertiaVec.y, inertiaVec.z, inertiaVec.x )
        
        local localAng = self.Instance:worldToLocalAngles(targetAngle)
        localAng.p = math.clamp(localAng.p, -15, 15)
        localAng.y = math.clamp(localAng.y, -15, 15)
        
        self.Instance:applyAngForce( (localAng*200 - self.Instance:getAngleVelocityAngle()*30) * inertia )
    end
    
end



--[[ Explosion ratelimit patcher ]]--

Projectile.NextDetonation = {}
Projectile.EXPLOSION_RATELIMIT = {
    ["models/props_phx/oildrum001_explosive.mdl"] = 0.1,
    ["models/props_c17/oildrum001_explosive.mdl"] = 0.1
}

--TODO: make sure server UUID doesnt change with restarts/addon changes
local IS_CFC = wire.serverUUID() == "1c17c305-2132-4428-840e-3f4cb52f9705"
local BLAST_RADIUS = 180

local function canDetonate( ent )
    return not IS_CFC or timer.curtime() > (Projectile.NextDetonation[ent:getModel()] or 0)
end

-- Breaks a prop while tagging you for the kill credit
-- Also will not explosion ratelimit you, at the cost of not tagging your kills.
local function taggedBreak( ent, forceTag )
    local mdl = ent:getModel()
    local wasTagged = false
    
    if IS_CFC then
        -- Don't tag if the ratelimiter is on cooldown
        if canDetonate( ent ) then
            local actuallyTag = forceTag
            
            -- only tag if its near a player
            if not actuallyTag then
                for i,v in pairs(find.allPlayers()) do
                    if v:isAlive() and v:isInPvp() and v:getPos():getDistance( ent:getPos() ) < BLAST_RADIUS then
                        actuallyTag = true
                        break
                    end
                end
            end
            
            -- okay search for NPCs next
            if not actuallyTag then
                for i,v in pairs(find.byClass("npc_*")) do
                    if v:getHealth() > 0 and v:getPos():getDistance( ent:getPos() ) < BLAST_RADIUS then
                        actuallyTag = true
                        break
                    end
                end
            end
            
            
            if actuallyTag then
                ent:applyDamage(10, owner(), owner(), DAMAGE.BLAST)
                Projectile.NextDetonation[ent:getModel()] = timer.curtime() + (Projectile.EXPLOSION_RATELIMIT[mdl] or 0.5)
                wasTagged = true
            end
        end
    else
        ent:applyDamage(10, owner(), owner(), DAMAGE.BLAST)
        wasTagged = false
    end
    
    ent:breakEnt()
    
    return wasTagged
end




function Projectile:detonate( dontBreak, collision )
    if self.Detonated then return end
    
    self.Enabled = false
    self.Detonated = true
    
    local hitUnfrozenProp = collision and isValid(collision.HitEntity) and not collision.HitEntity:isFrozen()
    
    if self.ExplosionPower > 0 then
        Util.spawn(function()
            local origin = self.Instance:getPos()
            local normal = Vector(0,0,1)
            
            if collision then
                local hitTraceInfo = trace.line( self.Instance:getPos(), self.Instance:getPos() + (collision.HitPos - self.Instance:getPos())*2, self.Instance )
                
                origin = hitTraceInfo.HitPos
                normal = hitTraceInfo.HitNormal
            end
            
            local radius = 50*math.sqrt(self.ExplosionPower)
            
            for i,v in pairs(self.SupplementaryExplosives) do
                if not isValid(v) then continue end
                
                local a = math.random()*360
                
                -- im so sorry for this monstrosity
                local ang3d = hitUnfrozenProp and Angle(math.random(),math.random(),0)*360 or normal:getAngle():getUp():getAngle():rotateAroundAxis(normal, a)
                local p = origin + ang3d:getForward()*(math.random(20, radius))
                
                v:setParent(nil)
                v:setPos(p)
                
                local tagged = taggedBreak(v, hitUnfrozenProp)
                
                -- wait 0.1s for the explosion ratelimiter
                -- why does this even exist :despair:
                if tagged then
                    Util.wait(0.1)
                end
            end
        end)
    end
    
    if isValid(self.Instance) and not dontBreak then
        taggedBreak( self.Instance, hitUnfrozenProp )
    end
    
    if effect.canCreate() then
        self:playExplosionEffect()
    end
    
    table.removeByValue(Projectile.Instances, self)
    hook.run("ProjectileRemoved", self)
end


function Projectile:isValid()
    return isValid(self.Instance)
end


function Projectile:remove()
    if isValid(self.Instance) then
        self.Instance:remove()
        self.Detonated = true
    end
    
    self.Enabled = false
    
    table.removeByValue(Projectile.Instances, self)
    
    hook.run("ProjectileRemoved", self)
end




timer.create("Projectile_Think", 0.1, 0, function()
    for i,v in pairs(Projectile.Instances) do
        v:think()
    end
end)


hook.add("EntityRemoved", "Projectile_Removal", function( e )
    if not e.Projectile then return end
    e.Projectile:detonate( true )
end)




return Projectile

