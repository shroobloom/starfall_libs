--@name SFMA v5
--@author Shrooblooms
--@shared
--@owneronly
--@include sb/chat_command.txt


local AutoSpectate = false


local ChatCommands = require("sb/chat_command.txt")





function ConsoleLog( ... )
    printConsole( Color(231, 55, 62), "[SFMA v5] ", Color(255,255,255), ... )
end

function ChatLog( ... )
    print( Color(231, 55, 62), "[SFMA v5] ", Color(255,255,255), ... )
end

function getColor( plr )
    return team.getColor(plr:getTeam())
end

function getName( plr )
    return "<" .. plr:getSteamID() .. "> " .. plr:getName()
end



local TRUSTED = {
    ["Director"] = true,
    ["Admin"] = true,
    ["Moderator"] = true,
    ["Sentinel"] = true,
    ["Exalted"] = true
}


function isTrusted( plr )
    return TRUSTED[plr:getTeamName()]
end




local lastOffender = nil

function logOffender( plr, ping )
    if ping == nil then ping = false end
    
    lastOffender = plr
    
    timer.stop("SFMA_clearLastOffender")
    timer.create("SFMA_clearLastOffender", 30, 1, function()
        lastOffender = nil
    end)
    
    
    if SERVER then
        net.start("SFMA_logOffender")
        net.writeEntity(plr)
        net.writeBool(ping)
        net.send(owner())
    end
    
    if SERVER and AutoSpectate and ping then
        concmd("fspectate \"" .. plr:getName() .. "\"")
    end
end




ChatCommands:add({
    Name = "autospectate",
    Description = "Automatically spectates when an offender is logged.",
    Aliases = {"autospec", "as"},
    Arguments = {},
    Run = function( user )
        if user ~= owner() then return end
        
        AutoSpectate = not AutoSpectate
        ChatLog("AutoSpectate is now ", AutoSpectate and Color(50,255,50) or Color(255,50,50), AutoSpectate and "on" or "off", Color(255,255,255), ".")
    end
})




local AFKWatch = {}


ChatCommands:add({
    Name = "await",
    Description = "Waits for someone to get back from being AFK, and notifies you when they do.",
    Aliases = {"a"},
    Arguments = {
        {
            Name = "Target",
            Type = "player"
        }
    },
    Run = function( user, Target )
        if user ~= owner() then return end
        
        if SERVER then
            AFKWatch[Target] = true
        end
        
        ChatLog("Awaiting the return of ", getColor(Target), getName(Target), Color(255,255,255), "...")
    end
})


if owner():isAdmin() then
    ChatCommands:add({
        Name = "skybox",
        Description = "Teleports you to the skybox.",
        Aliases = {"sb"},
        Run = function( user, Target )
            if user ~= owner() then return end
            
            local skyCamera = find.byClass("sky_camera")[1]
            
            if not skyCamera then
                return ChatCommands.Error("No skybox found for " .. game.getMap() .. "!")
            end
            
            owner():setPos( skyCamera:getPos() )
            ChatLog("Teleported to the Skybox.")
        end
    })
end



--[[ HOST MODE ]]--

local HostMode = false

ChatCommands:add({
    Name = "eventhost",
    Description = "Enables Event Host mode, which cloaks, gods, and puts you in PvP mode.",
    Aliases = {"host"},
    Run = function( user )
        if not SERVER then return end
        
        local state = not user:hasGodMode()
        HostMode = state
        
        concmd( "ulx " .. (state and "god" or "ungod") .. " \"$" .. user:getSteamID() .. "\"" )
        concmd( "ulx " .. (state and "cloak" or "uncloak") .. " \"$" .. user:getSteamID() .. "\"" )
        concmd( "ulx " .. (state and "setpvp" or "setbuild") .. " \"$" .. user:getSteamID() .. "\"" )
        
        if not user:isNoclipped() and state then
            concmd("ulx noclip \"$" .. user:getSteamID() .. "\"")
        end
        
        ChatLog("Event host mode ", state and Color(0,255,0) or Color(255,0,0), state and "enabled" or "disabled", Color(255,255,255), ".")
    end
})






if SERVER then
    
    
    hook.add("KeyPress", "SFMA_AFKWatch", function( plr, key )
        if not AFKWatch[plr] then return end
        
        AFKWatch[plr] = nil
        ChatLog(getColor(plr), getName(plr), Color(255,255,255), " is back!")
        logOffender( plr, true )
    end)
    
    
    
    local ENTS_OF_INTEREST = {
        ["gmod_wire_soundemitter"] = true,
        ["sent_streamradio"] = true,
        ["quad_prop"] = true,
        ["gmod_wire_expression2"] = true,
        ["starfall_processor"] = true,
        ["gmod_emitter"] = true
    }
    
    hook.add("OnEntityCreated", "SFMA_informNewEnt", function( ent )
        if not isValid(ent) or not isValid(ent:getOwner()) then return end
        
        local entOwner = ent:getOwner()
        local entClass = ent:getClass()
        
        timer.simple(0.25, function()
            if not isValid(entOwner) then return end
            
            if ENTS_OF_INTEREST[entClass] then
                local payload = {Color(231,220,117), entClass}
                
                if entClass == "gmod_wire_expression2" or entClass == "starfall_processor" then
                    local isE2 = entClass == "gmod_wire_expression2"
                    
                    payload = {
                        isE2 and Color(255,0,0) or Color(0,144,255), isE2 and "Expression 2" or "Starfall", 
                        Color(255,255,255), " chip named ", Color(255,255,144), ent:isValid() and ent:getChipName() or "[deleted]", Color(255,255,255)
                    }
                elseif entClass == "quad_prop" then
                    if not isValid(ent) then return end
                    
                    local mat = ent:getMaterial()
                    
                    payload = {
                        Color(231,220,117), "QuadProp (" .. math.round(ent:getWidth()) .. "x" .. math.round(ent:getHeight()) .. ")", Color(255,255,255)
                    }
                    
                    if mat ~= "" then
                        table.insert(payload, " with material ")
                        table.insert(payload, Color(255,255,144))
                        table.insert(payload, mat)
                    end
                end
                
                table.insert(payload, Color(255,255,255))
                table.insert(payload, ".")
                
                ConsoleLog(getColor(entOwner), getName(entOwner), Color(255,255,255), " spawned ", unpack(payload))
            end
        end)
    end)
    
    
    
    --TODO: remove, the simfphys limit is only 1 now
    local simfphysAlertCooldown = {}
    
    local function isSimfphys( ent )
        return isValid(ent) and ent:getClass() == "gmod_sent_vehicle_fphysics_base"
    end
    
    hook.add("OnEntityCreated", "SFMA_detectSimfphysSpam", function( ent )
        if not isValid(ent) or not isValid(ent:getOwner()) or simfphysAlertCooldown[ent:getOwner()] then return end
        if isTrusted( ent:getOwner() ) then return end
        if not isSimfphys(ent) then return end
        
        local Min, Max = ent:worldSpaceAABB()
        
        local NearbySimfphys = find.inBox(Min, Max, function(e)
            return isSimfphys(e)
        end)
        
        if #NearbySimfphys > 1 then
            local carOwner = ent:getOwner()
            
            ChatLog(getColor(carOwner), getName(carOwner), Color(255,255,255), " spawned multiple simfphys cars inside eachother!")
            logOffender( carOwner, true )
            simfphysAlertCooldown[carOwner] = true
            
            timer.simple(5, function()
                simfphysAlertCooldown[carOwner] = nil
            end)
        end
    end)
    
    
    
    local Keywords = {
        "proppush",
        "propspam",
        "stop",
        "admin",
        "fuck off"
    }
    
    hook.add("PlayerSay", "SFMA_detectMention", function( speaker, msg )
        if speaker == owner() then return end
        
        for i,v in pairs(find.allPlayers()) do
            if msg:find(v:getName(), nil, true) then
                return logOffender( v )
            end
        end
        
        for i,v in pairs(Keywords) do
            if msg:lower():find(v) then
                return logOffender( speaker, true )
            end
        end
    end)
    
    
    
    
    
    local propspamAlertCooldown = {}
    
    hook.add("OnEntityCreated", "SFMA_detectPropspam", function( ent )
        if not isValid(ent) or not ent:isValidPhys() or ent:getClass() ~= "prop_physics" or ent:getNoDraw() then return end
        
        local propOwner = ent:getOwner()
        if not isValid(propOwner) then return end
        if isTrusted( propOwner ) then return end
        
        if propOwner.PS_LastSpawn == ent:getModel() and (timer.curtime() - propOwner.PS_LastSpawnTime) < 1 then
            propOwner.PS_SpawnCount = (propOwner.PS_SpawnCount or 0) + 1
        else
            propOwner.PS_SpawnCount = 1
        end
        
        propOwner.PS_LastSpawn = ent:getModel()
        propOwner.PS_LastSpawnTime = timer.curtime()
        
        
        if not propspamAlertCooldown[propOwner] and propOwner.PS_SpawnCount >= 5 then
            ChatLog(getColor(propOwner), getName(propOwner), Color(255,255,255), " is propspamming ", Color(255,255,144), ent:getModel(), Color(255,255,255), "!")
            logOffender( propOwner, true )
            propspamAlertCooldown[propOwner] = true
            
            timer.simple(15, function()
                propspamAlertCooldown[propOwner] = nil
            end)
        end
        
    end)
    
    
    
    local tracked = {}
    local proppushAlertCooldown = {}
    
    local PP_BLACKLIST = {
        acf_seat_alias = true,
        prop_ragdoll = true
    }
    
    local function checkHolding( ply )
        local ent = tracked[ply]
        if not (isValid(ent) and isValid(ply)) then tracked[ply] = nil return end
        
        if ent:getCollisionGroup() == COLLISION_GROUP.WORLD then return end
        if not ply:keyDown(1) then return end
        if proppushAlertCooldown[ply] then return end
        if ply:getActiveWeapon() ~= ply:getWeapon("weapon_physgun") then return end
        
        --pickupper chip (TODO: better way of patching)
        if ent:getModel() == "models/hunter/misc/shell2x2.mdl" then return end
        
        local aabb_min, aabb_max = ent:worldSpaceAABB()
        local vel = ent:getVelocity() * timer.frametime()
        
        local pushing = find.inBox( aabb_min + vel, aabb_max + vel, function( e )
            if not isValid( e ) then return end
            if e == ent or e == ply then return end
            
            local owner = e:getOwner()
            if owner == ply then return end
            
            if e:isPlayer() then
                if e:isNoclipped() then return end
                if isValid(e:getVehicle()) then return end
            else
                if not isValid( e:getPhysicsObject() ) then return end
                if not isValid( owner ) then return end
                if e:isFrozen() then return end
                if PP_BLACKLIST[e:getClass()] then return end
            end
            
            return true
        end)
        
        if #pushing > 0 then
            ChatLog("Detected ", getColor(ply), getName(ply), Color(255,255,255), " prop pushing!")
            logOffender( ply , true )
            proppushAlertCooldown[ply] = true
            
            printConsole("wp: ", ply:getActiveWeapon())
            printConsole("tracked: ", tracked[ply])
            printConsole("src ent: ", ent)
            printConsole("src held?: ", ent:isPlayerHolding())
            printConsole("pped ent: ")
            for i,v in pairs(pushing) do
                printConsole(tostring(i) .. ". " .. tostring(v) .. " - ", v:getOwner(), " - " .. (v:getPos():getDistance(ent:getPos()) .. "u"))
            end
            
            timer.simple(20, function()
                proppushAlertCooldown[ply] = nil
            end)
        end
    end
    
    timer.create( "SFMA_proppushDetection", 0.25, 0, function()
        if table.isEmpty(tracked) then return end
        
        for ply, _ in pairs(tracked) do
            pcall(function() checkHolding( ply ) end)-- gmod continue :vomit:
        end
    end)
    
    hook.add( "PhysgunPickup", "SFMA_propPickup", function( ply, ent )
        if isTrusted( ply ) then return end
        if ent:isPlayer() then return end --idfk
        tracked[ply] = ent
    end)
    
    hook.add( "PhysgunDrop", "SFMA_propDrop", function( ply, ent )
        --if tracked[ply] ~= ent then return end
        
        tracked[ply] = nil
    end)
    
    
    
    
    hook.add("OnPhysgunReload", "SFMA_detectUnfreeze", function( _, ply )
        if isTrusted(ply) then return end
        
        local ent = ply:getEyeTrace().Entity
        local allEnts = ent:getAllConstrained()
        
        for i=#allEnts, 1, -1 do
            local v = allEnts[i]
            
            if not v:isValidPhys() or v:getParent():isValid() or not v:isFrozen() then
                table.remove(allEnts, i)
            end
        end
        
        if #allEnts == 0 then return end
        
        ConsoleLog( getColor(ply), getName(ply), Color(255,255,255), " unfroze ", Color(255,255,144), #allEnts, Color(255,255,255), " entities!" )
    end)
    
end





if CLIENT then
    
    net.receive("SFMA_logOffender", function()
        net.readEntity(logOffender)
        
        if net.readBool() then
            --concmd("fspectate \"" .. lastOffender:getSteamID() .. "\"")
            player():emitSound("npc/metropolice/vo/on1.wav")
        end
    end)
    
    
    local lastYPress = 0
    
    hook.add("inputPressed", "SFMA_quickSpectate", function( key )
        if input.getKeyName(key) ~= "y" then return end
        
        if not lastOffender then
            return ChatLog("There is no recent offender to spectate!")
        end
        
        -- Require a double-tap when in PvP mode
        if owner():isInPvp() and timer.curtime() - lastYPress > 0.35 then
            lastYPress = timer.curtime()
            return ChatLog("Double tap Y to spectate...")
        end
        
        ChatLog("Spectating ", getColor(lastOffender), getName(lastOffender), Color(255,255,255), ".")
        concmd("fspectate \"" .. lastOffender:getSteamID() .. "\"")
    end)
    
end


