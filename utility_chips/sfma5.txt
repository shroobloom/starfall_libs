--@name SFMA v5
--@author Boxtrot
--@shared






function ConsoleLog( ... )
    printConsole( Color(231, 55, 62), "[SFMA v5] ", Color(255,255,255), ... )
end

function ChatLog( ... )
    print( Color(231, 55, 62), "[SFMA v5] ", Color(255,255,255), ... )
end

function getColor( plr )
    return team.getColor(plr:getTeam())
end

function getName( plr )
    return "<" .. plr:getSteamID() .. "> " .. plr:getName()
end

function isTrusted( plr )
    return plr:getTeam() >= 26 -- Exalted
end




local lastOffender = nil

function logOffender( plr, ping )
    lastOffender = plr
    
    timer.stop("SFMA_clearLastOffender")
    timer.create("SFMA_clearLastOffender", 30, 1, function()
        lastOffender = nil
    end)
    
    
    if SERVER then
        net.start("SFMA_logOffender")
        net.writeEntity(plr)
        net.writeBool(ping)
        net.send(owner())
    end
end




if SERVER then
    
    hook.add("OnEntityCreated", "SFMA_informNewChip", function( ent )
        if not isValid(ent) or (ent:getClass() ~= "wire_expression2" and ent:getClass() ~= "starfall_processor") then return end
        
        local chipOwner = ent:getOwner()
        local isE2 = ent:getClass() == "wire_expression2"
        
        timer.simple(0.25, function()
            ConsoleLog(getColor(chipOwner), getName(chipOwner),
                Color(255,255,255), " spawned ", isE2 and Color(255,0,0) or Color(0,144,255), isE2 and "Expression 2" or "Starfall", 
                Color(255,255,255), " chip named ", Color(255,255,144), ent:isValid() and ent:getChipName() or "[deleted]", Color(255,255,255), ".")
        end)
        
    end)
    
    
    
    --TODO: remove, the simfphys limit is only 1 now
    local simfphysAlertCooldown = {}
    
    local function isSimfphys( ent )
        return isValid(ent) and ent:getClass() == "gmod_sent_vehicle_fphysics_base"
    end
    
    hook.add("OnEntityCreated", "SFMA_detectSimfphysSpam", function( ent )
        if not isValid(ent) or not isValid(ent:getOwner()) or simfphysAlertCooldown[ent:getOwner()] then return end
        if isTrusted( ent:getOwner() ) then return end
        if not isSimfphys(ent) then return end
        
        local Min, Max = ent:worldSpaceAABB()
        
        local NearbySimfphys = find.inBox(Min, Max, function(e)
            return isSimfphys(e)
        end)
        
        if #NearbySimfphys > 1 then
            local carOwner = ent:getOwner()
            
            ChatLog(getColor(carOwner), getName(carOwner), Color(255,255,255), " spawned multiple simfphys cars inside eachother!")
            logOffender( carOwner, true )
            simfphysAlertCooldown[carOwner] = true
            
            timer.simple(5, function()
                simfphysAlertCooldown[carOwner] = nil
            end)
        end
    end)
    
    
    
    local Keywords = {
        "proppush",
        "propspam"
    }
    
    hook.add("PlayerSay", "SFMA_detectMention", function( speaker, msg )
        if speaker == owner() then return end
        
        for i,v in pairs(find.allPlayers()) do
            if msg:find(v:getName(), nil, true) then
                return logOffender( v )
            end
        end
        
        for i,v in pairs(Keywords) do
            if msg:lower():find(v) then
                return logOffender( speaker, true )
            end
        end
    end)
    
    
    
    
    
    local propspamAlertCooldown = {}
    
    hook.add("OnEntityCreated", "SFMA_detectPropspam", function( ent )
        if not isValid(ent) or not ent:isValidPhys() or ent:getClass() ~= "prop_physics" or ent:getNoDraw() then return end
        
        local propOwner = ent:getOwner()
        if not isValid(propOwner) then return end
        if isTrusted( propOwner ) then return end
        
        if propOwner.PS_LastSpawn == ent:getModel() and (timer.curtime() - propOwner.PS_LastSpawnTime) < 1 then
            propOwner.PS_SpawnCount = (propOwner.PS_SpawnCount or 0) + 1
        else
            propOwner.PS_SpawnCount = 1
        end
        
        propOwner.PS_LastSpawn = ent:getModel()
        propOwner.PS_LastSpawnTime = timer.curtime()
        
        
        if not propspamAlertCooldown[propOwner] and propOwner.PS_SpawnCount >= 5 then
            ChatLog(getColor(propOwner), getName(propOwner), Color(255,255,255), " is propspamming ", Color(255,255,144), ent:getModel(), Color(255,255,255), "!")
            logOffender( propOwner, true )
            propspamAlertCooldown[propOwner] = true
            
            timer.simple(15, function()
                propspamAlertCooldown[propOwner] = nil
            end)
        end
        
    end)
    
    
    --[[
    local HeldProps = {}
    
    hook.add("PhysgunPickup",  "SFMA_logHeldProp", function( plr, ent )
        HeldProps[plr] = ent
    end)
    
    hook.add("PhysgunDrop",  "SFMA_logHeldProp", function( plr, ent )
        HeldProps[plr] = nil
    end)
    
    
    
    timer.create("SFMA_detectProppush", 0.1, 0, function()
        for plr,ent in pairs(HeldProps) do
            local min, max = ent:worldSpaceAABB()
            
            
        end
    end)
    ]]
    
    
    
    
end





if CLIENT then
    
    
    
    net.receive("SFMA_getFriends", function()
        
        local status = {}
        
        for i,v in find.allPlayers() do
            if v == player() then continue end
            
            if v:getFriendStatus() == "friend" then
                table.insert(status, v)
            end
        end
        
        net.start("SFMA_getFriends_reply")
        net.writeTable( status )
        net.send()
    end)
    
    
    
    
    
    if player() == owner() then
        
        net.receive("SFMA_logOffender", function()
            net.readEntity(logOffender)
            
            if net.readBool() then
                player():emitSound("npc/overwatch/radiovoice/on1.wav")
            end
        end)
        
        
        hook.add("inputPressed", "quickFSpec", function( key )
            if key ~= 35 then return end
            
            if not lastOffender then
                return ChatLog("There is no recent offender to spectate!")
            end
            
            
            ChatLog("Spectating ", getColor(lastOffender), getName(lastOffender), Color(255,255,255), ".")
            concmd("fspectate \"" .. lastOffender:getSteamID() .. "\"")
        end)
        
    end
    
    
end




