--@name Micromanage
--@author shroobloom
--@client
--@owneronly 
--@include sb/util.txt


local Util = require("sb/util.txt")


local Micromanage = {}
Micromanage.Selection = nil




local PADDING = 3
local FONT_HEIGHT = 22
local SELECT_HITBOX_PADDING = 30
local PP_COURSE_E2_NAME = "proppush_course"


local PermissionLevels = {
    ["Director"] = 3,
    ["Admin"] = 3,
    ["Moderator"] = 2,
    ["Sentinel"] = 1
}


local Fonts = {
    Main = render.createFont("Coolvetica", FONT_HEIGHT, 1200, true)
}



function Micromanage.drawOption( icon, name, doDropdown, buttonX, buttonY )
    render.setColor( Color( 255,255,255 ) )
    
    if icon then
        render.setMaterial( icon )
        render.drawTexturedRect( buttonX + 4, buttonY + 4, 20, 20 )
        render.setMaterial( nil )
    end
    
    render.drawSimpleText( buttonX + PADDING + 28, buttonY + 14, name, 0, 1 )
    
    if doDropdown then
        local tX = buttonX + 196 - PADDING
        local tY = buttonY + 15
        
        render.drawTriangle( tX - 6, tY - 6, tX, tY, tX - 6, tY + 6 )
    end
end

function Micromanage.defaultDraw( self, plr, buttonX, buttonY )
    Micromanage.drawOption( self.Icon, self.Name, self.Dropdown ~= nil, buttonX, buttonY )
end

function Micromanage.useCommandOn( command, plr, ... )
    local isULX = command:sub(1,3) == "ulx"
    concmd(command .. " \"" .. (isULX and "$" or "") .. plr:getSteamID() .. "\" " .. table.concat({...}, " "))
end

function Micromanage.useOption( self, plr )
    if self.Commands then
        for i,v in pairs(self.Commands) do
            Micromanage.useCommandOn( v, plr )
        end
    end
end

function Micromanage.isRagdolled( plr )
    return plr:getEyePos():isZero()
end

function Micromanage.scaleColor( num, max )
    return Color(255,255*math.clamp(1 - num/max, 0, 1),255*math.clamp(1 - num/max, 0, 1))
end


function Micromanage.isInJail( plr )
    local floor = trace.line( plr:getPos(), plr:getPos() + Vector(0,0,1000), find.allPlayers() )
    return floor.Entity:isValid() and not isValid(floor.Entity:getOwner()) and floor.Entity:getModel() == "models/props_building_details/storefront_template001a_bars.mdl"
end




Micromanage.Options = {}
Micromanage.ChoosableOptions = {}



local OptionStruct = {
    -- The callback to use when drawing, arguments self, Player, x, and y
    Draw = Micromanage.defaultDraw,
    
    -- The callback to use when the option is clicked, arguments self and Player
    Use = Micromanage.useOption,
    
    -- The callback to use to determine whether or not this option should be displayed.
    ShouldDisplay = function( Player ) return true end,
    
    -- The string rank to restrict it to. See PermissionLevels.
    Restrict = nil,
    
    -- A path to the image to use (use silkicons: https://wiki.facepunch.com/gmod/silkicons)
    Icon = nil
}


function Micromanage:addOption( Data, Pos )
    
    if Pos then
        table.insert(Micromanage.Options, Pos, Data)
    else
        table.insert(Micromanage.Options, Data)
    end
    
    Data.SelectionLerp = 0
    Util.applyDefaults(Data, OptionStruct)
    
    if Data.Icon then
        Data.Icon = material.createFromImage(Data.Icon, "")
    end
    
    return Data
end


function Micromanage:removeOption( name )
    for i,v in pairs(Micromanage.Options) do
        if v.Name == name then
            table.remove(Micromanage.Options, i)
            break
        end
    end
end




--[[ DEFAULT OPTIONS ]]--

Micromanage:addOption({
    Name = "Copy SteamID",
    Icon = "icon16/vcard_edit.png",
    Use = function( self, plr )
        setClipboardText( plr:getSteamID() )
    end
})

Micromanage:addOption({
    Name = "View Warns",
    Restrict = "Sentinel",
    Icon = "icon16/shield.png",
    Use = function( self, plr )
        Micromanage.useCommandOn( "audit menuid", plr )
    end
})

   
Micromanage:addOption({
    Name = "Spectate",
    Restrict = "Moderator",
    Icon = "icon16/eye.png",
    Commands = {
        "fspectate"
    }
})


Micromanage:addOption({
    Name = "Freeze",
    Restrict = "Moderator",
    Icon = "icon16/stop.png",
    Draw = function( self, plr, buttonX, buttonY )
        Micromanage.drawOption( self.Icon, plr:isFrozen() and "Unfreeze" or "Freeze", false, buttonX, buttonY )
    end,
    Use = function( self, plr )
        if not plr:isFrozen() then
            Micromanage.useCommandOn( "ulx freeze", plr )
            Micromanage.useCommandOn( "ulx freezeprops", plr )
        else
            Micromanage.useCommandOn( "ulx unfreeze", plr )
        end
    end
})

Micromanage:addOption({
    Name = "Freeze Props",
    Restrict = "Moderator",
    Icon = "icon16/wand.png",
    Use = function( self, plr )
        Micromanage.useCommandOn( "ulx freezeprops", plr )
    end
})


Micromanage:addOption({
    Name = "Cleanup",
    Restrict = "Moderator",
    Icon = "icon16/cut_red.png",
    Initialize = function( self, plr )
        plr.EntCountCache = #find.all(function(e)
            return e:getOwner() == plr
        end)
    end,
    Draw = function( self, plr, buttonX, buttonY )
        Micromanage.defaultDraw( self, plr, buttonX, buttonY )
        
        render.setColor( Micromanage.scaleColor(plr.EntCountCache or 0, 100) )
        render.drawSimpleText( buttonX + 200 - PADDING, buttonY + 14, plr.EntCountCache or "", 2, 1 )
    end,
    Commands = {
        "ulx cleanup"
    }
})



Micromanage:addOption({
    Name = "Goto",
    Restrict = "Sentinel",
    Icon = "icon16/user_go.png",
    Commands = {
        "ulx goto"
    }
})



Micromanage:addOption({
    Name = "Sit",
    Restrict = "Moderator",
    Icon = "icon16/report_link.png",
    Draw = function( self, plr, buttonX, buttonY )
        Micromanage.drawOption( self.Icon, Micromanage.isInJail(plr) and "Return" or "Sit", false, buttonX, buttonY )
    end,
    Use = function( self, plr )
        if not Micromanage.isInJail(plr) then
            Micromanage.useCommandOn( "ulx bring", plr )
            Micromanage.useCommandOn( "ulx jail", plr )
            Micromanage.useCommandOn( "ulx freezeprops", plr )
        else
            Micromanage.useCommandOn( "ulx unjail", plr )
            Micromanage.useCommandOn( "ulx return", plr )
        end
    end
})


Micromanage:addOption({
    Name = "Send to Brazil",
    Restrict = "Moderator",
    Icon = "flags16/br.png",
    Commands = {
        "ulx brazil"
    }
})




local HELLCURSE = {
    "Drunk",
    "Blindness",
    "NoJump",
    "Crouch",
    "WeaponIndecision",
    "TextScramble",
    "RandomSounds",
    "Schizophrenia",
    "DisableNoclip",
    "MotionSight",
    "CantStopWontStop",
    "Clumsy",
    "SanFransisco"
}

local hc = Micromanage:addOption({
    Name = "Hellcurse",
    Restrict = "Admin",
    Icon = "icon16/user_red.png",
    Use = function( self, plr )
        for i,c in pairs(HELLCURSE) do
            Micromanage.useCommandOn( "ulx scurse", plr, c )
        end
    end
})

--[[
timer.simple(2, function()
    hc.Use( hc, owner() )
end)]]


--[[
Micromanage:addOption({
    Name = "Ragdoll",
    Restrict = "Moderator",
    Icon = "icon16/vector.png",
    Draw = function( self, plr, buttonX, buttonY )
        Micromanage.drawOption( self.Icon, Micromanage.isRagdolled( plr ) and "Unragdoll" or "Ragdoll", false, buttonX, buttonY )
    end,
    Use = function( self, plr )
        Micromanage.useCommandOn( Micromanage.isRagdolled(plr) and "ulx unragdoll" or "ulx ragdoll", plr )
    end
})]]



-- Proppush course integration
Micromanage:addOption({
    Name = "Proppush Course",
    Restrict = "Sentinel",
    Icon = "icon16/computer_go.png",
    Use = function( self, plr )
        concmd("say_team .course " .. plr:getName())
    end,
    ShouldDisplay = function()
        return #find.byClass("gmod_wire_expression2", function(e)
            return e:getOwner() == owner() and e:getChipName() == PP_COURSE_E2_NAME
        end) > 0
    end
})




Util.bindPress("MOUSE2", function()
    if not input.isKeyDown( 13 ) then return end --C
    if owner():isInPvp() and (not owner():isNoclipped() or isValid(owner():getVehicle())) then return end
    
    local mX, mY = input.getCursorPos()
    local bestDist = math.huge
    local bestPlayer = nil
    
    for i,v in pairs(find.allPlayers()) do
        if v == owner() or not v.sX then continue end
        
        local minX = v.sX - SELECT_HITBOX_PADDING
        local minY = v.sY - SELECT_HITBOX_PADDING
        local maxX = v.sX + v.sW + SELECT_HITBOX_PADDING
        local maxY = v.sY + v.sH + SELECT_HITBOX_PADDING
        
        if mX > minX and mY > minY and mX < maxX and mY < maxY then
            local cX = v.sX + v.sW/2
            local cY = v.sY + v.sH/2
            
            local dist = (mX - cX)^2 + (mY - cY)^2
            
            if dist < bestDist then
                bestDist = dist
                bestPlayer = v
            end
        end
    end
    
    Micromanage.Selection = nil
    table.empty(Micromanage.ChoosableOptions)
    
    if not bestPlayer then return end
    
    Micromanage.Selection = bestPlayer
    local PermissionLevel = PermissionLevels[player():getTeamName()] or 0
    
    for i,v in pairs(Micromanage.Options) do
        if v.Restrict and PermissionLevels[v.Restrict] > PermissionLevel then continue end
        if not v.ShouldDisplay( Micromanage.Selection ) then continue end
        
        if v.Initialize then
            v:Initialize( bestPlayer )
        end
        
        table.insert(Micromanage.ChoosableOptions, v)
    end
    
end)



local SelectedOption = nil
local MouseDown = false

local function isMicromanageAllowed()
    return owner():isInBuild() or (owner():isNoclipped() and not isValid(owner():getVehicle()))
end

local function setOptionSelection( n )
    if SelectedOption == n then return end
    
    SelectedOption = n
    
    MouseDown = false
end

Util.bindRelease("c", function()
    Micromanage.Selection = nil
    setOptionSelection( nil )
end)



Util.bindPress("MOUSE1", function()
    if not isMicromanageAllowed() then return end
    
    local Option = Micromanage.ChoosableOptions[SelectedOption]
    if not Option then return end
    
    MouseDown = true
    
end)

Util.bindRelease("MOUSE1", function()
    if not isMicromanageAllowed() then return end
    
    if not MouseDown then return end
    MouseDown = false
    
    local Option = Micromanage.ChoosableOptions[SelectedOption]
    if not Option then return end
    
    Option:Use( Micromanage.Selection )
    
end)



enableHud( player(), true )



Util.bindPress("c", function()
    if not isMicromanageAllowed() then return end
    if not render.isHUDActive() then return end
    
    input.enableCursor(true)
end)


Util.bindRelease("c", function()
    --if not isMicromanageAllowed() then return end
    if not render.isHUDActive() then return end
    
    input.enableCursor(false)
end)



hook.add("drawhud", "Micromanage_HUD", function()
    if not input.isKeyDown( 13 ) then return end --C
    if not isMicromanageAllowed() then return end
    
    render.setFilterMag(2)
    
    local hasSelection = Micromanage.Selection ~= nil
    
    for i,plr in pairs( find.allPlayers() ) do
        if plr == owner() then continue end
        
        render.setFont(Fonts.Main)
        
        local selected = Micromanage.Selection == plr
        
        if not selected then
            local screen = (plr:getPos() + Vector(0,0,64)):toScreen()
            local pX = screen.x
            local pY = screen.y
            
            local nameWidth, nameHeight = render.getTextSize( plr:getName() )
            local w = nameWidth + 100 + PADDING*2
            local h = nameHeight + PADDING*2
            
            plr.sX = pX
            plr.sY = pY
            plr.sW = w
            plr.sH = h
        end
        
        local bgA = (hasSelection and not selected and 44 or 230)
        local tA = (hasSelection and not selected and 60 or 255)
        
        render.setColor( Color(44,44,44, bgA ) )
        render.drawRect( plr.sX, plr.sY, plr.sW, plr.sH )
        
        render.setColor( team.getColor(plr:getTeam()):setA(tA) )
        render.drawSimpleText( plr.sX + PADDING, plr.sY + PADDING, plr:getName() )
        
        render.setColor( plr:isInPvp() and Color(255,0,0, tA) or Color(0,255,0, tA) )
        render.drawSimpleText( plr.sX + plr.sW - PADDING, plr.sY + PADDING, plr:isInPvp() and "PvP" or "Build", 2 )
        
        if plr:isInPvp() then
            local hpc = plr:getHealth() / plr:getMaxHealth()
            local healthCol = Color(hpc*120, 1, 1):hsvToRGB()
            healthCol:setA(tA)
            
            render.setColor( Color(0,0,0, tA ) )
            render.drawRect( plr.sX, plr.sY + plr.sH - 1, plr.sW, 1 )
            
            render.setColor( healthCol )
            render.drawRect( plr.sX, plr.sY + plr.sH - 1, plr.sW*hpc, 1 )
        end
        
        
        if selected then
            
            local mX, mY = input.getCursorPos()
            local localmX = mX - (plr.sX + plr.sW + PADDING)
            local localmY = mY - plr.sY
            
            setOptionSelection( localmX > 0 and localmX < 200 and math.ceil(localmY/(FONT_HEIGHT/0.75)) or -1 )
            
            for i,v in pairs(Micromanage.ChoosableOptions) do
                local Goal = (i == SelectedOption) and 1 or 0
                v.SelectionLerp = math.lerp( 0.4, v.SelectionLerp, Goal )
                
                local buttonX = plr.sX + plr.sW + PADDING
                local buttonY = plr.sY + FONT_HEIGHT/0.75*(i-1)
                
                local shadeGoal = 44
                
                if (i == SelectedOption) then
                    if MouseDown then
                        shadeGoal = 22
                    else
                        shadeGoal = 255
                    end
                end
                
                local shade = math.lerp( v.SelectionLerp, 44, shadeGoal )
                
                render.setColor( Color(shade,shade,shade, bgA ) )
                render.drawRect( buttonX, buttonY, 200, FONT_HEIGHT/0.75 )
                
                v:Draw( plr, buttonX, buttonY )
                
                render.setColor( Color(255,255,255) )
                render.drawLine( buttonX, buttonY + FONT_HEIGHT/0.75 - 1, buttonX + 200, buttonY + FONT_HEIGHT/0.75 - 1)
                
                if v.Dropdown and i == SelectedOption then
                    --TBA
                end
            end
        end
        
    end
    
end)



hook.add("PlayerDisconnect", "Micromanage_RemoveTargetOnDisconnect", function(_, _, plr)
    if Micromanage.Selection == plr then
        Micromanage.Selection = nil
    end
end)



return Micromanage

